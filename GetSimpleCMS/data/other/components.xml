<?xml version="1.0" encoding="UTF-8"?>
<channel><item><title><![CDATA[BurgerIcon]]></title><slug>burgericon</slug><value><![CDATA[&lt;!-- Called in pageheader.inc.php --&gt;

&lt;script&gt;
    function toggleMenu(el) {
        let outerContainer = document.querySelector(&quot;.mobile-nav&quot;);
        let innerContainer = document.querySelector(&quot;.mobile-nav-menu&quot;);
        outerContainer.style.height = parseInt(innerContainer.offsetHeight) + 10 + &#039;px&#039;;
        outerContainer.style.width = parseInt(innerContainer.offsetWidth) + 20 + &#039;px&#039;;

        el.classList.toggle(&quot;show-menu&quot;);
        outerContainer.classList.toggle(&quot;hide-mobile-nav&quot;);
        innerContainer.classList.toggle(&quot;hide-menu&quot;);
    }
&lt;/script&gt;

&lt;div class=&quot;mobile-nav-icon&quot; onclick=&quot;toggleMenu(this)&quot;&gt;
    &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[BurgerMenu]]></title><slug>burgermenu</slug><value><![CDATA[&lt;!-- Called in pageheader.inc.php --&gt;

&lt;div  class=&quot;mobile-nav hide-mobile-nav&quot; &gt;
    &lt;nav class=&quot;mobile-nav-menu hide-menu&quot; &gt;
        &lt;ul&gt;
&lt;?php get_i18n_navigation(&#039;index&#039;,0,99,I18N_SHOW_MENU); ?&gt;&lt;!-- Only show pages in menu, not all pages --&gt;
        &lt;/ul&gt;
    &lt;/nav&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[FEULE_MenuAside]]></title><slug>feule_menuaside</slug><value><![CDATA[&lt;!-- Component is called in navigation.inc.php --&gt;

&lt;h2&gt;Menu&lt;/h2&gt;

&lt;?php

class feule_menu_aside {
    
    private $css_class_page_link = &quot;page-link&quot;;
    private $css_class_subpage_link = &quot;subpage-link&quot;;
    
//
//  Determine which user group(s) any logged on user is a member of.
//
    private function determine_user_groups(){
        
        $currentUserGroups = getCurrentUserGroups();
        
        return $currentUserGroups;
        
    }
    
//
//
//  &#039;simplexml&#039; is PHP Extension used to determine the viewing restrictions
//
    private function get_file_restrictions($page_url) {
        
        if (function_exists(&#039;simplexml_load_file&#039;)) {
            
            if (file_exists(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;)) {
                
                $xmldata = simplexml_load_file(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;) or die(&quot;Failed to load&quot;);
                
                return $xmldata-&gt;memberonly;
                
            } else {
                
                //echo &quot;file &quot; . $page_url . &quot;.xml not found&lt;br/&gt;&quot;;
                
            }
            
        } else {
            
            //echo &quot;simplexml functions are not available.&lt;br/&gt;&quot;;
            
        }
        
        return false;
        
    }
    
    
//  
//  Create the menu
//  
    // Add a link to the page html
    private function echo_link($page_array, $css_class, $langCode) {
        
        echo &quot;&lt;li&gt;&quot;;
        if ( $langCode == &#039;default&#039; ) {
            echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
        } else {
            // Check if page for non-default language exists
            if ( array_key_exists( &quot;title_&quot;.$langCode, $page_array )) {
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title_&quot;.$langCode] . &quot;&lt;/a&gt;&quot;;
            } else {
                // Fall back to default language page
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
            }
        }
        
        echo &quot;&lt;/li&gt;&quot;;

        return true;
        
    }
    
    
//
// Check permissions for user groups and file restrictions.
//
    //
    private function check_permissions($currentUserGroups, $file_restrictions) {
        
        $permission = false;
        
        if (strpos($file_restrictions, &quot;Unauthorized&quot;) !== false){
            
            $permission = true;
            
        } else {
            
            foreach($currentUserGroups as $userGroup) {
                
                if( $userGroup == &quot;Admin&quot;){     // Admin members can see all pages
                    
                    return true;
                    
                } else {
                
                    $pos = strpos($file_restrictions, $userGroup );
                    
                    if( $pos !== false){
                        $permission = true;
                    }
                    
                }
                
            }   //END foreach()
            
        }
        
        return $permission;
        
    }   //END fcn check_permissions()
    
    
//
// Parse each top level page element
//
    // Parse each top level page element
    public function parse_elements ($i18n_pages, $langCode){
        
        echo &quot;&lt;ul&gt;&quot;;
        
        foreach($i18n_pages as $x =&gt; $x_value) {
            
            if($x != &#039;&#039; &amp;&amp;  $x_value[&quot;menuStatus&quot;] == &quot;Y&quot; ){
            // Last element has key= &#039;&#039; and lists all top level pages
            // menuStatus &#039;Y&#039; means page is to be shown in menu(s)
            // (unlike, for example, the search results page)
                
                $currentUserGroups = $this-&gt;determine_user_groups();    // Is array
                
                // &#039;parent&#039; key always exists, value can be empty
                // If a page has a parent it will be called with the child pages of the parent
                if ($x_value[&quot;parent&quot;] == &quot;&quot;){  // Is page top level?
                    
                    // file_restrictions are comma-sep. strings (feule Group names wie &#039;Users&#039;)
                    $file_restrictions = $this-&gt;get_file_restrictions($x_value[&#039;url&#039;]);
                    
                    if ($file_restrictions) { // File restrictions are set
                        
                        $permission_check = $this-&gt;check_permissions($currentUserGroups, $file_restrictions);
                        
                    } else {
                        
                        $permission_check = 0;
                    }
                    
                    if ($permission_check || $file_restrictions == &#039;&#039;){
                        
                        $this-&gt;echo_link($i18n_pages[$x_value[&#039;url&#039;]], $this-&gt;css_class_page_link, $langCode);
                        
                        // &#039;children&#039; key only exists if child pages are present
                        if (array_key_exists(&#039;children&#039;, $x_value)){
                            
                            $showChildList = false;
                            $childListSet = false;  // Required to know if ul tag has to be closed
                            
                            foreach($x_value[&#039;children&#039;] as $z =&gt; $z_value) {
                                
                                $file_restrictions = $this-&gt;get_file_restrictions($z_value);
                                
                                if ($file_restrictions) { // File restrictions are set
                                    
                                    $permission_check = $this-&gt;check_permissions($currentUserGroups, $file_restrictions);
                                    
                                    if ($permission_check || $file_restrictions == &#039;&#039;){
                                        
                                        if($childListSet == false){
                                            echo &quot;&lt;ul&gt;&quot;;
                                            $childListSet = true;
                                        }
                                        $this-&gt;echo_link($i18n_pages[$z_value], $this-&gt;css_class_subpage_link, $langCode);
                                    }
                                    
                                } else {    // No file restrictions so link is displayed
                                    
                                    if($childListSet == false){
                                        echo &quot;&lt;ul&gt;&quot;;
                                        $childListSet = true;
                                    }
                                    $this-&gt;echo_link($i18n_pages[$z_value], $this-&gt;css_class_subpage_link, $langCode);
                                    
                                }   // END if ($file_restrictions){}
                                
                            }   // END foreach($x_value[&#039;children&#039;]...{}
                            
                            if($childListSet == true){
                                echo &quot;&lt;/ul&gt;&quot;;
                                $childListSet = false;
                            }
                            
                        } else {
                        
                        }   // END if (has children)
                        
                    }   // END if ($permission_check)
                    
                } else {    // Page is a sub-page, so will be displayed as such
                    
                  //echo &quot;page has parent&lt;br&gt;&quot;;
                    
                }
                
           }
            
        }    // END foreach($i18n_pages ...)
        
        echo &quot;&lt;/ul&gt;&quot;;
        
    }    // END fcn. parse_elements()
    
    
    public function debug(){
        
        foreach(debug_backtrace() as $t) {
            echo $t[&#039;file&#039;] . &#039; line &#039; . $t[&#039;line&#039;] . &#039; calls &#039; . $t[&#039;function&#039;] . &quot;()&lt;br/&gt;&quot;;
        }
        
    }
    
}    // END class feule_menu_aside


$i18n_pages = return_i18n_pages();

echo &#039;&lt;script&gt;&#039;;
echo &#039;console.log(&#039;. json_encode( $i18n_pages) .&#039;)&#039;;
echo &#039;&lt;/script&gt;&#039;;

// Determine code for current language 
// (args is set by i18n call in navigation.inc.php)
global $args;
$language = $args[0];

// Determine if language code is default
// (Required as default language elements are specified 
//  in $i18n_pages arrays without a code
//  e.g. &#039;title&#039; instead of &#039;title_de&#039;.)
foreach($i18n_pages[&#039;index&#039;] as $x =&gt; $x_value) {
    if ( substr( $x, 0, 6 )== &quot;title_&quot; ){
        if ( substr( $x, -2 ) ==  $language ) {
            $langCode = $language;
        } else {
            $langCode = &#039;default&#039;;
        }
    }
}

$feule_menu_aside = new feule_menu_aside();

$feule_menu_aside -&gt; parse_elements($i18n_pages, $langCode);

?&gt;
]]></value></item><item><title><![CDATA[FEULE_MenuIcon]]></title><slug>feule_menuicon</slug><value><![CDATA[&lt;!-- Called in pageheader.inc.php --&gt;

&lt;script&gt;
    function toggleMenu(el) {
        let outerContainer = document.querySelector(&quot;.mobile-nav&quot;);
        let innerContainer = document.querySelector(&quot;.mobile-nav-menu&quot;);
        outerContainer.style.height = parseInt(innerContainer.offsetHeight) + 10 + &#039;px&#039;;
        outerContainer.style.width = parseInt(innerContainer.offsetWidth) + 20 + &#039;px&#039;;

        el.classList.toggle(&quot;show-menu&quot;);
        outerContainer.classList.toggle(&quot;hide-mobile-nav&quot;);
        innerContainer.classList.toggle(&quot;hide-menu&quot;);
    }
&lt;/script&gt;

&lt;div class=&quot;mobile-nav-icon&quot; onclick=&quot;toggleMenu(this)&quot;&gt;
    &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[FEULE_MenuMobile]]></title><slug>feule_menumobile</slug><value><![CDATA[&lt;!-- Component called in header.inc.php --&gt;

&lt;div  class=&quot;mobile-nav hide-mobile-nav&quot; &gt;
    &lt;nav class=&quot;mobile-nav-menu hide-menu&quot; &gt;

&lt;?php

class feule_menu_mobile {
    
    private $css_class_page_link = &quot;page-link&quot;;
    private $css_class_subpage_link = &quot;subpage-link&quot;;
    
//
//  Determine which user group(s) any logged on user is a member of.
//
    private function determine_user_groups(){
        
        $currentUserGroups = getCurrentUserGroups();
        
        return $currentUserGroups;
        
    }
    
//
//
//  &#039;simplexml&#039; is PHP Extension used to determine the viewing restrictions
//
    private function get_file_restrictions($page_url) {
        
        if (function_exists(&#039;simplexml_load_file&#039;)) {
            
            if (file_exists(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;)) {
                
                $xmldata = simplexml_load_file(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;) or die(&quot;Failed to load&quot;);
                
                return $xmldata-&gt;memberonly;
                
            } else {
                
                //echo &quot;file &quot; . $page_url . &quot;.xml not found&lt;br/&gt;&quot;;
                
            }
            
        } else {
            
            //echo &quot;simplexml functions are not available.&lt;br/&gt;&quot;;
            
        }
        
        return false;
        
    }
    
    
//  
//  Create the menu
//  
    // Add a link to the page html
    private function echo_link($page_array, $css_class, $langCode) {
        
        echo &quot;&lt;li&gt;&quot;;
        if ( $langCode == &#039;default&#039; ) {
            echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
        } else {
            // Check if page for non-default language exists
            if ( array_key_exists( &quot;title_&quot;.$langCode, $page_array )) {
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title_&quot;.$langCode] . &quot;&lt;/a&gt;&quot;;
            } else {
                // Fall back to default language page
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
            }
        }
        
        echo &quot;&lt;/li&gt;&quot;;

        return true;
        
    }
    
    
//
// Check permissions for user groups and file restrictions.
//
    //
    private function check_permissions($currentUserGroups, $file_restrictions) {
        
        $permission = false;
        
        if (strpos($file_restrictions, &quot;Unauthorized&quot;) !== false){
            
            $permission = true;
            
        } else {
            
            foreach($currentUserGroups as $userGroup) {
                
                $pos = strpos($file_restrictions, $userGroup );
                
                if( $pos !== false){
                    $permission = true;
                }
                
            }   //END foreach()
            
        }
        
        return $permission;
        
    }   //END fcn check_permissions()
    
    
//
// Parse each top level page element
//
    // Parse each top level page element
    public function parse_elements ($i18n_pages, $langCode){
        
        echo &quot;&lt;ul&gt;&quot;;
        
        foreach($i18n_pages as $x =&gt; $x_value) {
            
            if($x != &#039;&#039; &amp;&amp;  $x_value[&quot;menuStatus&quot;] == &quot;Y&quot; ){
            // Last element has key= &#039;&#039; and lists all top level pages
            // menuStatus &#039;Y&#039; means page is to be shown in menu(s)
            // (unlike, for example, the search results page)
                
                $currentUserGroups = $this-&gt;determine_user_groups();    // Is array
                
                // &#039;parent&#039; key always exists, value can be empty
                // If a page has a parent it will be called with the child pages of the parent
                if ($x_value[&quot;parent&quot;] == &quot;&quot;){  // Is page top level?
                    
                    // file_restrictions are comma-sep. strings (feule Group names wie &#039;Users&#039;)
                    $file_restrictions = $this-&gt;get_file_restrictions($x_value[&#039;url&#039;]);
                    
                    if ($file_restrictions) { // File restrictions are set
                        
                        $permission_check = $this-&gt;check_permissions($currentUserGroups, $file_restrictions);
                        
                    } else {
                        
                        $permission_check = 0;
                    }
                    
                    if ($permission_check || $file_restrictions == &#039;&#039;){
                        
                        $this-&gt;echo_link($i18n_pages[$x_value[&#039;url&#039;]], $this-&gt;css_class_page_link, $langCode);
                        
                        // &#039;children&#039; key only exists if child pages are present
                        if (array_key_exists(&#039;children&#039;, $x_value)){
                            
                            $showChildList = false;
                            $childListSet = false;  // Required to know if ul tag has to be closed
                            
                            foreach($x_value[&#039;children&#039;] as $z =&gt; $z_value) {
                                
                                $file_restrictions = $this-&gt;get_file_restrictions($z_value);
                                
                                if ($file_restrictions) { // File restrictions are set
                                    
                                    $permission_check = $this-&gt;check_permissions($currentUserGroups, $file_restrictions);
                                    
                                    if ($permission_check || $file_restrictions == &#039;&#039;){
                                        
                                        if($childListSet == false){
                                            echo &quot;&lt;ul&gt;&quot;;
                                            $childListSet = true;
                                        }
                                        $this-&gt;echo_link($i18n_pages[$z_value], $this-&gt;css_class_subpage_link, $langCode);
                                    }
                                    
                                } else {    // No file restrictions so link is displayed
                                    
                                    if($childListSet == false){
                                        echo &quot;&lt;ul&gt;&quot;;
                                        $childListSet = true;
                                    }
                                    $this-&gt;echo_link($i18n_pages[$z_value], $this-&gt;css_class_subpage_link, $langCode);
                                    
                                }   // END if ($file_restrictions){}
                                
                            }   // END foreach($x_value[&#039;children&#039;]...{}
                            
                            if($childListSet == true){
                                echo &quot;&lt;/ul&gt;&quot;;
                                $childListSet = false;
                            }
                            
                        } else {
                        
                        }   // END if (has children)
                        

                    }   // END if ($permission_check)
                    
                } else {    // Page is a sub-page, so will be displayed as such
                    
                  //echo &quot;page has parent&lt;br&gt;&quot;;
                    
                }
                
           }
            
        }    // END foreach($i18n_pages ...)
        
        echo &quot;&lt;/ul&gt;&quot;;
        
    }    // END fcn. parse_elements()
    
    
    public function debug(){
        
        foreach(debug_backtrace() as $t) {
            echo $t[&#039;file&#039;] . &#039; line &#039; . $t[&#039;line&#039;] . &#039; calls &#039; . $t[&#039;function&#039;] . &quot;()&lt;br/&gt;&quot;;
        }
        
    }
    
}    // END class feule_menu_aside


$i18n_pages = return_i18n_pages();

echo &#039;&lt;script&gt;&#039;;
echo &#039;console.log(&#039;. json_encode( $i18n_pages) .&#039;)&#039;;
echo &#039;&lt;/script&gt;&#039;;

// Determine code for current language
// (args is set by i18n call in navigation.inc.php)
global $args;
$language = $args[0];
//echo &quot;Language: &quot; . $language . &quot;&lt;br&gt;&quot;;

// Determine if language code is default
// (Required as default language elements are specified
//  in $i18n_pages arrays without a code
//  e.g. &#039;title&#039; instead of &#039;title_de&#039;.)
foreach($i18n_pages[&#039;index&#039;] as $x =&gt; $x_value) {
    if ( substr( $x, 0, 6 )== &quot;title_&quot; ){
        if ( substr( $x, -2 ) ==  $language ) {
            $langCode = $language;
        } else {
            $langCode = &#039;default&#039;;
        }
    }
}

$feule_menu_mobile = new feule_menu_mobile();

$feule_menu_mobile -&gt; parse_elements($i18n_pages, $langCode);

?&gt;

    &lt;/nav&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[FEULE_UserArea]]></title><slug>feule_userarea</slug><value><![CDATA[&lt;!-- Component called in aside_feule_userarea.inc.php --&gt;
&lt;!--2022-01-06 14:50--&gt;

&lt;h2&gt;User Area&lt;/h2&gt;

&lt;script&gt;
    
    function closeForm(elementClass) {
        document.querySelector(elementClass).classList.toggle(&quot;show-form&quot;);
    }
    
    function toggleForm(elementClass) {
        
        let selector = &quot;div.&quot; + elementClass;
        let activeFormElement = document.querySelector(selector);
        
        // Toggle active link and sibling links
        let formParentElement = activeFormElement.parentElement;
        let childFormElements = formParentElement.children;
       
        for (let i=0; i &lt; childFormElements.length; i++) {
            
            // Is current active form?
            if(childFormElements[i].classList.contains(elementClass)){
                if (childFormElements[i].classList.contains(&#039;show-form&#039;)) {
                    //console.log(&quot;show-form found for: &quot; . elementClass);
                } else {
                    //console.log(&quot;show-form not found for: &quot; . elementClass);
                }
                childFormElements[i].classList.toggle(&#039;show-form&#039;);
            } else {
                // Is another form still being shown?
                if (childFormElements[i].classList.contains(&#039;show-form&#039;)) {
                    childFormElements[i].classList.toggle(&#039;show-form&#039;);
                }
            }
        }
        if (activeFormElement.classList.contains(&#039;show-form&#039;)) {
            //console.log(&quot;show-form found &quot;);
        } else {
            //console.log(&quot;show-form not found &quot;);
        }
        
        let el = document.querySelector(selector + &quot; h2&quot;);
        el.addEventListener(&quot;click&quot;, function() { closeForm(selector) }, false)
    }
    
    function toggleForms (elementClass, language) {
        
        console.log(&quot;Fcn toggleForms: &quot; + elementClass + &quot;, lang: &quot; + language);
        let selector = &quot;a.&quot; + elementClass;
        let activeElement = document.querySelector(selector);
        
        // Toggle active link and sibling links
        let linkParentElement = activeElement.parentElement;
        let childElements = linkParentElement.children;
        
        for (let i=0; i &lt; childElements.length; i++) {
            
            // Is current active link?
            if(childElements[i].classList.contains(elementClass)){
                if (childElements[i].classList.contains(&#039;active&#039;)) {
                    //console.log(&quot;show-form  &quot;);
                } else {
                    ///console.log(&quot;active not found &quot;);
                }
                childElements[i].classList.toggle(&#039;active&#039;);
            } else {
                // Is another link still being shwon as active?
                if (childElements[i].classList.contains(&#039;active&#039;)) {
                    childElements[i].classList.toggle(&#039;active&#039;);
                }
            }
        }
        
        if(elementClass == &quot;feule-login&quot;){
            toggleForm(elementClass);
        } else {
            if(elementClass == &quot;feule-register&quot;){
                toggleForm(elementClass);
            } else {
                
                if(elementClass == &quot;feuleForgotPass&quot;){
                    window.location.href = &quot;?lang=&quot; + language + &quot;&amp;forgotPass=1&amp;lang=&quot; + language;
                } else {
                    if (elementClass == &quot;feuleForgotUser&quot;){
                        window.location.href = &quot;?lang=&quot; + language + &quot;&amp;forgotUser=1&amp;lang=&quot; + language;
                    }
                }
            }
        }
    }
    
&lt;/script&gt;

&lt;?php
    
    // Determine code for current language
    // (args is set by i18n call in navigation.inc.php)
    global $args;
    $language = $args[0];
    
    // No containing div for welcome container as presence/absense of welcome container
    // is used to trigger css3 sibling combinator to hide &#039;feule-form-links&#039; container.
    welcome_message_login();
    
    // div classes are same as classes of links set in function show_feule_forms()
    echo &#039;&lt;div class=&quot;feule-login inactive&quot;&gt;&#039;;
    show_login_box();
    echo &#039;&lt;/div&gt;&#039;;
    
    echo &#039;&lt;div class=&quot;feule-register inactive&quot;&gt;&#039;;
    user_login_register();
    echo &#039;&lt;/div&gt;&#039;;
    
    function show_feule_forms($lang) {
        
        echo &quot;&lt;div class=&#039;feule-form-links&#039;&gt;&quot;;
        
            echo &quot;&lt;p&gt;&quot;;
            
                echo &quot;&lt;a href=# class=&#039;feule-login&#039; onclick=&#039;toggleForms(\\&quot;feule-login\\&quot;,\\&quot;&quot; . $lang . &quot;\\&quot;)&#039;&gt;Login&lt;/a&gt;&quot;;
                
                echo &quot;&lt;a href=# class=&#039;feule-register&#039; onclick=&#039;toggleForms(\\&quot;feule-register\\&quot;,\\&quot;&quot; . $lang . &quot;\\&quot;)&#039;&gt;Register&lt;/a&gt;&quot;;
                
                echo &quot;&lt;a href=# class=&#039;feuleForgotPass&#039; onclick=&#039;toggleForms(\\&quot;feuleForgotPass\\&quot;,\\&quot;&quot; . $lang . &quot;\\&quot;)&#039;&gt;Forgot&amp;nbsp;Pass?&lt;/a&gt;&quot;;
                
                echo &quot;&lt;a href=# class=&#039;feuleForgotUser&#039; onclick=&#039;toggleForms(\\&quot;feuleForgotUser\\&quot;,\\&quot;&quot; . $lang . &quot;\\&quot;)&#039;&gt;Forgot&amp;nbsp;Username?&lt;/a&gt;&quot;;
               
            echo &quot;&lt;/p&gt;&quot;;
            
        echo &quot;&lt;/div&gt;&quot;;
        
    }    // END fcn. show_forms()
    
    show_feule_forms($language);

?&gt;

&lt;script&gt;
    
    // Function is described below
    function checkSuccess(elementClass) {

        let selector = &quot;div.&quot; + elementClass;
        let activeFormElement = document.querySelector(selector);
        
        if (activeFormElement.getElementsByClassName(&#039;error&#039;)[0]){
            let errorElement = document.getElementsByClassName(&#039;error&#039;)[0];
            toggleForm(elementClass);
        } else {
            //console.log(&#039;No Error Element &#039;);
        }
    }
    
    // Check if login has been successful
    // If unsuccessful, an element with class=&#039;error&#039; is added to the login form 
    // by the feule plugin. If checkSuccess() finds this error element, the 
    // login form will be toggled open.
    checkSuccess(&quot;feule-login&quot;);
    
&lt;/script&gt;
]]></value></item><item><title><![CDATA[SearchQueryRenderer]]></title><slug>searchqueryrenderer</slug><value><![CDATA[&lt;ul&gt;
&lt;?php if (@$_REQUEST[&#039;words&#039;]) {?&gt;&lt;!-- From Search Form --&gt;
    &lt;li&gt;
        &lt;?php  echo htmlspecialchars($_REQUEST[&#039;words&#039;]); ?&gt;
    &lt;/li&gt;
&lt;?php  } ?&gt;
&lt;?php if (@$_REQUEST[&#039;tags&#039;]) {?&gt;&lt;!-- From Tag Cloud --&gt;
    &lt;li&gt;
        &lt;?php  echo htmlspecialchars($_REQUEST[&#039;tags&#039;]); ?&gt;
    &lt;/li&gt;
&lt;?php  } ?&gt;
&lt;/ul&gt;]]></value></item><item><title><![CDATA[SearchResultRenderer]]></title><slug>searchresultrenderer</slug><value><![CDATA[&lt;h3 class=&quot;search-entry-title&quot;&gt;
  &lt;?php if ($showLanguage) { ?&gt;
  &lt;span class=&quot;search-entry-language&quot;&gt;
    &lt;?php echo htmlspecialchars($item-&gt;language, ENT_NOQUOTES); ?&gt;
  &lt;/span&gt;
  &lt;?php } ?&gt;
  &lt;a href=&quot;&lt;?php echo $item-&gt;link; ?&gt;&quot;&gt;
    &lt;?php echo htmlspecialchars($item-&gt;title, ENT_NOQUOTES); ?&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;?php if ($showDate) { ?&gt;
&lt;div class=&quot;search-entry-date&quot;&gt;
  &lt;?php echo strftime($dateFormat, $item-&gt;pubDate); ?&gt;
&lt;/div&gt;
&lt;?php } ?&gt;
&lt;div class=&quot;search-entry-excerpt&quot;&gt;
  &lt;?php echo $item-&gt;getExcerpt($item-&gt;content, $numWords); ?&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[SidebarNav]]></title><slug>sidebarnav</slug><value><![CDATA[&lt;!-- AA Replaces Sidebar --&gt;
&lt;!-- Called in sidebar.inc.php --&gt;
&lt;h2&gt;Navigation&lt;/h2&gt;
&lt;ul&gt;
&lt;!-- Only show pages in menu, not all pages --&gt;
&lt;?php get_i18n_navigation(&#039;index&#039;,0,99,I18N_SHOW_MENU); ?&gt;
&lt;/ul&gt;]]></value></item><item><title><![CDATA[SocialMedia]]></title><slug>socialmedia</slug><value><![CDATA[&lt;div id=&quot;socialmedia&quot; &gt;
	&lt;h2&gt;Connect&lt;/h2&gt;
	&lt;div class=&quot;icons&quot;&gt;
	&lt;?php
		if($innov_settings){
			foreach($innov_settings as $id=&gt;$setting){
				if ($setting  != &#039;&#039; ){
					echo &#039;&lt;a href=&quot;&#039;.$setting.&#039;&quot;&gt;&lt;img src=&quot;&#039;.get_theme_url(false).&#039;/assets/images/&#039;.$id.&#039;.png&quot; alt=&quot;&#039;.$id.&#039;&quot;/&gt;&lt;/a&gt;&#039;;
				}
			}
		}
	?&gt;				
		&lt;img src=&quot;&lt;?php get_theme_url(); ?&gt;/assets/images/break.png&quot; /&gt;
		
		&lt;!-- addthis popup - you can add your username if you want analytics: http://www.addthis.com/help/customizing-addthis --&gt;
		&lt;div class=&quot;addthis_toolbox&quot; style=&quot;display:inline;width:24px;&quot; &gt;
			&lt;a href=&quot;//www.addthis.com/bookmark.php?v=250&quot; class=&quot;addthis_button_compact&quot;&gt;&lt;img src=&quot;&lt;?php get_theme_url(); ?&gt;/assets/images/share.png&quot; /&gt;&lt;/a&gt;
		&lt;/div&gt;
		&lt;script type=&quot;text/javascript&quot; src=&quot;//s7.addthis.com/js/250/addthis_widget.js&quot;&gt;&lt;/script&gt;
	&lt;/div&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[TagCloud_de]]></title><slug>tagcloud_de</slug><value><![CDATA[&lt;h2&gt;Tags&lt;/h2&gt;
&lt;?php get_i18n_tags(array(&#039;lang&#039;=&gt;&#039;de&#039;, &#039;showlang&#039;=&gt;&#039;1&#039;, &#039;slug&#039;=&gt;&#039;searchresults_de&#039;)); ?&gt;]]></value></item><item><title><![CDATA[TagCloud_en]]></title><slug>tagcloud_en</slug><value><![CDATA[&lt;h2&gt;Tags&lt;/h2&gt;
&lt;?php get_i18n_tags(array(&#039;lang&#039;=&gt;&#039;en&#039;, &#039;showlang&#039;=&gt;&#039;1&#039;, &#039;slug&#039;=&gt;&#039;searchresults&#039;)); ?&gt;]]></value></item><item><title><![CDATA[Tagline]]></title><slug>tagline</slug><value><![CDATA[Just Another GetSimple Website]]></value></item></channel>
