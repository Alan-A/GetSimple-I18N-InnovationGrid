<?xml version="1.0" encoding="UTF-8"?>
<channel><item><title><![CDATA[BurgerIcon]]></title><slug>burgericon</slug><value><![CDATA[&lt;!-- Called in pageheader.inc.php --&gt;

&lt;script&gt;
    function toggleMenu(el) {
        let outerContainer = document.querySelector(&quot;.mobile-nav&quot;);
        let innerContainer = document.querySelector(&quot;.mobile-nav-menu&quot;);
        outerContainer.style.height = parseInt(innerContainer.offsetHeight) + 10 + &#039;px&#039;;
        outerContainer.style.width = parseInt(innerContainer.offsetWidth) + 20 + &#039;px&#039;;

        el.classList.toggle(&quot;show-menu&quot;);
        outerContainer.classList.toggle(&quot;hide-mobile-nav&quot;);
        innerContainer.classList.toggle(&quot;hide-menu&quot;);
    }
&lt;/script&gt;

&lt;div class=&quot;mobile-nav-icon&quot; onclick=&quot;toggleMenu(this)&quot;&gt;
    &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[BurgerMenu]]></title><slug>burgermenu</slug><value><![CDATA[&lt;!-- Called in pageheader.inc.php --&gt;

&lt;div  class=&quot;mobile-nav hide-mobile-nav&quot; &gt;
    &lt;nav class=&quot;mobile-nav-menu hide-menu&quot; &gt;
        &lt;ul&gt;
&lt;?php get_i18n_navigation(&#039;index&#039;,0,99,I18N_SHOW_MENU); ?&gt;&lt;!-- Only show pages in menu, not all pages --&gt;
        &lt;/ul&gt;
    &lt;/nav&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[FEULE_MenuAside]]></title><slug>feule_menuaside</slug><value><![CDATA[&lt;!-- Component is called in navigation.inc.php --&gt;

&lt;h2&gt;Menu&lt;/h2&gt;

&lt;?php

class feule_menu_aside {
    
    
    private $css_class_page_link = &quot;page-link&quot;;
    private $css_class_subpage_link = &quot;subpage-link&quot;;
    
//
//  Determine which user group(s) any logged on user is a member of.
//
    private function determine_user_groups(){
        
        if (function_exists(&#039;getCurrentUserGroups&#039;)){
            
            $currentUserGroups = getCurrentUserGroups();
            
            //echo &quot;Current User Group(s): &quot;;
            
            //foreach($currentUserGroups as $userGroup) {
                
                //echo $userGroup . &quot;, &quot;;
                
            //}
            
            //echo &quot;&lt;br&gt;&quot;;
            
            return $currentUserGroups;
            
        } else {
        
            //echo &quot;36: function getCurrentUserGroups() does not exist&quot; . &quot;&lt;br&gt;&quot;;
            return false;
        
        }
        
    }
    
//  
//  Create the menu
//  
    // Add a link to the page html
    private function echo_link($page_array, $css_class, $langCode) {
        
        //console_log(&#039;Text 147: &#039;, $page_array);
        
        echo &quot;&lt;li&gt;&quot;;
        if ( $langCode == &#039;default&#039; ) {
            echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
        } else {
            // Check if page for non-default language exists
            if ( array_key_exists( &quot;title_&quot;.$langCode, $page_array )) {
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title_&quot;.$langCode] . &quot;&lt;/a&gt;&quot;;
            } else {
                // Fall back to default language page
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
            }
        }
        
        echo &quot;&lt;/li&gt;&quot;;

        return true;
        
    }
    
    
//
// Check permissions for user groups and file restrictions.
//
    //
    private function check_permissions($currentUserGroups, $file_restrictions) {
        
        //echo &quot;Starting fcn check_permissions &lt;br&gt;&quot;;
        
        $permission = false;
        
        if (strpos($file_restrictions, &quot;Unauthorized&quot;) !== false){
            
            //echo &quot;userGroup: Unauthorized found&lt;br&gt;&quot;;
            
            $permission = true;
            
        } else {
            
            foreach($currentUserGroups as $userGroup) {
                
                //echo &quot;Checking for userGroup: &quot; . $userGroup . &quot;&lt;br&gt;&quot;;
                
                if( $userGroup == &quot;Admin&quot;){     // Admin members can see all pages
                    
                    return true;
                    
                } else {
                
                    $pos = strpos($file_restrictions, $userGroup );
                    
                    if( $pos !== false){
                        //echo &quot;Permission for userGroup: &quot; . $userGroup . &quot; found&lt;br&gt;&quot;;
                        $permission = true;
                    }
                    
                }
                
            }   //END foreach()
            
        }
        
        return $permission;
        
    }   //END fcn check_permissions()
    
    
//
//
//  &#039;simplexml&#039; is PHP Extension used to determine the viewing restrictions
//
    private function get_file_restrictions($page_url) {
        
        if (function_exists(&#039;simplexml_load_file&#039;)) {
            
            //echo &quot;simplexml functions are available.&lt;br /&gt;\\n&quot;;
            
            if (file_exists(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;)) {
                
                //echo &quot;129: file &quot; . $page_url . &quot;.xml found&lt;br/&gt;&quot;;
                
                $xmldata = simplexml_load_file(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;) or die(&quot;Failed to load&quot;);
                
                //echo &quot;132: memberonly: &quot; . $xmldata-&gt;memberonly . &quot;&lt;br/&gt;&quot;;
                
                return $xmldata-&gt;memberonly;
                
            } else {
                
                //echo &quot;138: file &quot; . $page_url . &quot;.xml not found&lt;br/&gt;&quot;;
                return false;
                
            }
            
        } else {
            
            //echo &quot;simplexml functions are not available.&lt;br/&gt;&quot;;
            return false;
            
        }
        
        return false;
        
    }   // END Fucntion get_file_restrictions()
    
    
//  
//  Create the menu
//  
    // 
    private function process_page($pagesArray, $pageKey, $langCode, $levelCount, $numberLevels) {
        
        $pageArray = $pagesArray[$pageKey];
        
        //echo &quot;164: pageKey: &quot; . $pageKey . &quot;, Parent: &quot; . $pageArray[&quot;parent&quot;] . &quot;, levelCount: &quot; . $levelCount . &quot;&lt;br&gt;&quot;;
        
        //console_log(&#039;Text 76: &#039;, &#039;Text 76: &#039;);
        //console_log(&#039;Text 76: &#039;, $pageArray);
        
        // file_restrictions are comma-sep. strings (feule Group names wie &#039;Users&#039;)
        $file_restrictions = $this-&gt;get_file_restrictions($pageArray[&#039;url&#039;]);
        
        //echo &quot;172: file_restrictions: &quot; . $file_restrictions . &quot;&lt;br&gt;&quot;;
        
        // Either no file restrictions for current page (&#039;&#039;) or FEULE not active (false)
        if ($file_restrictions == false || $file_restrictions == &#039;&#039;){
            
            //echo &quot;177: file_restrictions not found&quot; . &quot;&lt;br&gt;&quot;;
            
        } else {
            
            // Is array
            $currentUserGroups = $this-&gt;determine_user_groups();
            
            //echo &quot;184: currentUserGroups: &quot; . $currentUserGroups;
            
            if ($currentUserGroups !== false) { // FEULE is active
                
                $permission_check = $this-&gt;check_permissions($currentUserGroups, $file_restrictions);
                
                //echo &quot;190: permission_check: &quot; . $permission_check . &quot;&lt;br&gt;&quot;;
                
            } else {
                
                $permission_check = 1;
                
            }
            
        }
        
        //echo &quot;200: file_restrictions: &quot; . $file_restrictions . &quot;, permission_check: &quot; . $permission_check . &quot;&lt;br&gt;&quot;;
        
        if ( $file_restrictions == &#039;&#039; || $file_restrictions == false || $permission_check){
            
//            echo &quot;&lt;ul&gt;&quot;;
            
            //echo &quot;204: levelCount: &quot; . $levelCount . &quot;, pageArray[&#039;parent&#039;]: &quot; . $pageArray[&quot;parent&quot;] . &quot;&lt;br&gt;&quot;;
            
            if ($levelCount !== 0 || $pageArray[&quot;parent&quot;] == &#039;&#039;){
                
                $this-&gt;echo_link($pageArray, $this-&gt;css_class_page_link, $langCode);
                
            }
            
            // &#039;children&#039; key only exists if child pages are present
            if (array_key_exists(&#039;children&#039;, $pageArray)){
                
              //echo &quot;207: levelCount: &quot; . $levelCount . &quot;&lt;br&gt;&quot;;
              //echo &quot;208: page has children&lt;br&gt;&quot;;
                
                if ($levelCount &lt; $numberLevels) {
                    
                    $levelCount = $levelCount +1;
                    
                    echo &quot;&lt;li class=&#039;no-bullet&#039;&gt;&quot;;
                    echo &quot;&lt;ul&gt;&quot;;
                    
                    $childArray = $pageArray[&#039;children&#039;];
                    
                    foreach ($childArray as $childKey) {
                    
                        //echo &quot;221: Child: &quot; . $childKey . &quot;&lt;br&gt;&quot;;
                    
$parse_child_elements = $this-&gt;process_page($pagesArray, $childKey, $langCode, $levelCount, $numberLevels);
                    
                    }
                    
                    echo &quot;&lt;/ul&gt;&quot;;
                    echo &quot;&lt;/li&gt;&quot;;
                    
                    $levelCount = $levelCount -1;
                    
                }
                
            } else {
            
               //echo &quot;page has no children&lt;br&gt;&quot;;
                
            }   // END if (has children)
            
            //$this-&gt;echo_link($i18n_pages[$pageArray], $this-&gt;css_class_page_link, $langCode);
            
//            echo &quot;&lt;/ul&gt;&quot;;
            
        }   // END if ($permission_check)
        
        return true;
        
    }       // END Function process_page()
    
    
//
// Parse each page element in the i18n_pages array.
//
    // Parse each top level page element
    public function parse_elements ($pagesArray, $langCode, $parentPage, $levelCount, $numberLevels){
        
        //console_log(&#039;Text 221:&#039;, $langCode);
        
        //echo &quot;265: langCode: &quot; . $langCode . &quot;, parentPage: &quot; . $parentPage  . &quot;, levelCount: &quot; . $levelCount  . &quot;, numberLevels: &quot; . $numberLevels . &quot;&lt;br&gt;&quot;;
        
        echo &quot;&lt;ul&gt;&quot;;
        
        // Should menu be generated from the top level down or from a specific (parent) page?
        if ($parentPage == &quot;&quot;) {
            
            // Loop through all pages
            foreach($pagesArray as $pageKey =&gt; $pageArray) {
                
    //          echo &quot;&lt;br&gt;&quot;;
    //          echo &quot;Key:&quot; . $pageKey . &quot;&lt;br&gt;&quot;;
                
                //echo &quot;MenuStatus:&quot; . $pageArray[&quot;menuStatus&quot;] . &quot;&lt;br&gt;&quot;;
                
                // Ignore last element in array
                // Last element lists all top level pages
                if($pageKey != &#039;&#039; ){
                    
                    // Do page settings allow display?
                    // menuStatus &#039;Y&#039; means page is to be shown in menu(s)
                    // (unlike, for example, the search results page)
                    if($pageArray[&quot;menuStatus&quot;] == &quot;Y&quot; ){
                        
                        // Is page not a subpage?
                        // &#039;parent&#039; key always exists, value can be empty
                        // If a page has a parent it will be called with the child pages of the parent
                        if ($pageArray[&quot;parent&quot;] == &quot;&quot;){
                            
    //                      echo &quot;Ready to process page[&#039;url&#039;]: &quot; . $pageArray[&#039;url&#039;] . &quot;&lt;br&gt;&quot;;
                            
                            //echo &quot;page has no parent&lt;br&gt;&quot;;
                            
                            //console_log(&#039;Text 253:&#039;, $pageArray);
                            
                            $pageProcessor = $this-&gt;process_page($pagesArray, $pageKey, $langCode, $levelCount, $numberLevels);
                            // Is array
                            
                        } else {    // Page is a sub-page, so will be displayed as such
                            
                          //echo &quot;page has parent&lt;br&gt;&quot;;
                            
                        }   // END if ($pageArray[&quot;parent&quot;])
                        
                   }    // END if($pageArray[&quot;menuStatus&quot;])
                    
               }// END if($pageKey != &#039;&#039;)
                
            }    // END foreach($pagesArray ...)
            
       // Generate menu from a specific (parent) page
       } else {
            
            //echo &quot;322: parentPage: &quot; . $parentPage . &quot;&lt;br&gt;&quot;;
            
            $pageArray = $pagesArray[$parentPage];
            
            if ($pageArray[&quot;menuStatus&quot;] == &quot;Y&quot;) {
                
                //echo &quot;menuStatus: Y&lt;br&gt;&quot;;
                
                $levelCount = $levelCount + 1;
                
                foreach($pageArray[&quot;children&quot;] as $pageKey =&gt; $pageName) {
                
                    //echo &quot;334: pageKey: &quot; . $pageKey . &quot;, pageName: &quot; . $pageName . &quot;&lt;br&gt;&quot;;
                    
                    $pageProcessor = $this-&gt;process_page($pagesArray, $pageName, $langCode, $levelCount, $numberLevels);
                }
                
            }
            
        }   // END if ($parentPage ...)
        
        echo &quot;&lt;/ul&gt;&quot;;
        
    }    // END fcn. parse_elements()
    
    
    public function debug(){
        
        foreach(debug_backtrace() as $t) {
            echo $t[&#039;file&#039;] . &#039; line &#039; . $t[&#039;line&#039;] . &#039; calls &#039; . $t[&#039;function&#039;] . &quot;()&lt;br/&gt;&quot;;
        }
        
    }
    
}    // END class feule_menu_aside

// - - - - - - - - - - - - - - - - - - - - -
// START - Get the list of pages
// Is a flat array - can be listed using &#039;print_r($pagesArray)&#039; below
$pagesArray = return_i18n_pages();


//echo &quot;&lt;pre&gt;&quot;;
//print_r($pagesArray);
//echo &quot;&lt;/pre&gt;&quot;;


// CAUTION! DO NOT ACTIVATE FUNCTION N MOBILE AND ASIDE VERSIONS WITH THE SAME NAME
//
//function console_log( $text, $data ){
//  echo $text;
//  echo &#039;&lt;script&gt;&#039;;
//echo &#039;console.log(&#039;.$text.&#039;)&#039;;
//  echo &#039;console.log(&#039;. json_encode( $data ) .&#039;)&#039;;
//  echo &#039;&lt;/script&gt;&#039;;
//}


// Determine code for current language 
// (args is set by i18n call in navigation.inc.php)
global $args;
$language = $args[0];
//echo &quot;Language: &quot; . $language . &quot;&lt;br&gt;&quot;;
$parentPage = $args[1];
//echo &quot;parentPage: &quot; . $parentPage . &quot;&lt;br&gt;&quot;;
$numberLevels = $args[2];
$levelCount = 0;


// Determine if language code is default
// (Required as default language elements are specified 
//  in $i18n_pages arrays without a code
//  e.g. &#039;title&#039; instead of &#039;title_de&#039;.)
foreach($pagesArray[&#039;index&#039;] as $pageKey =&gt; $pageArray) {
    //echo &quot;Test: &quot; . $x . &quot;: &quot; . $x_value . &quot;&lt;br&gt;&quot;;
    if ( substr( $pageKey, 0, 6 )== &quot;title_&quot; ){
        //echo &quot;title_ found&lt;br&gt;&quot;;
        if ( substr( $pageKey, -2 ) ==  $language ) {
            $langCode = $language;
        } else {
            $langCode = &#039;default&#039;;
        }
    }
}
//echo &quot;langCode: &quot; . $langCode  . &quot;&lt;br&gt;&quot;;

$feule_menu_aside = new feule_menu_aside();

$feule_menu_aside -&gt; parse_elements($pagesArray, $langCode, $parentPage, $levelCount, $numberLevels);

?&gt;
]]></value></item><item><title><![CDATA[FEULE_MenuIcon]]></title><slug>feule_menuicon</slug><value><![CDATA[&lt;!-- Called in pageheader.inc.php --&gt;

&lt;script&gt;
    function toggleMenu(el) {
        let outerContainer = document.querySelector(&quot;.mobile-nav&quot;);
        let innerContainer = document.querySelector(&quot;.mobile-nav-menu&quot;);
        outerContainer.style.height = parseInt(innerContainer.offsetHeight) + 10 + &#039;px&#039;;
        outerContainer.style.width = parseInt(innerContainer.offsetWidth) + 20 + &#039;px&#039;;

        el.classList.toggle(&quot;show-menu&quot;);
        outerContainer.classList.toggle(&quot;hide-mobile-nav&quot;);
        innerContainer.classList.toggle(&quot;hide-menu&quot;);
    }
&lt;/script&gt;

&lt;div class=&quot;mobile-nav-icon&quot; onclick=&quot;toggleMenu(this)&quot;&gt;
    &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[FEULE_MenuMobile]]></title><slug>feule_menumobile</slug><value><![CDATA[&lt;!-- Component called in header.inc.php --&gt;

&lt;div  class=&quot;mobile-nav hide-mobile-nav&quot; &gt;
    &lt;nav class=&quot;mobile-nav-menu hide-menu&quot; &gt;

&lt;?php

class feule_menu_mobil {
    
    private $css_class_page_link = &quot;page-link&quot;;
    private $css_class_subpage_link = &quot;subpage-link&quot;;
    
//
//  Determine which user group(s) any logged on user is a member of.
//
    private function determine_user_groups(){
        
        if (function_exists(&#039;getCurrentUserGroups&#039;)){
            
            $currentUserGroups = getCurrentUserGroups();
            
            //echo &quot;Current User Group(s): &quot;;
            
            //foreach($currentUserGroups as $userGroup) {
                
                //echo $userGroup . &quot;, &quot;;
                
            //}
            
            //echo &quot;&lt;br&gt;&quot;;
            
            return $currentUserGroups;
            
        } else {
        
            return false;
        
        }
        
    }
    
//
//
//  &#039;simplexml&#039; is PHP Extension used to determine the viewing restrictions
//
    private function get_file_restrictions($page_url) {
        
        if (function_exists(&#039;simplexml_load_file&#039;)) {
            
            //echo &quot;simplexml functions are available.&lt;br /&gt;\\n&quot;;
            
            if (file_exists(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;)) {
                
                //echo &quot;file &quot; . $page_url . &quot;.xml found&lt;br/&gt;&quot;;
                
                $xmldata = simplexml_load_file(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;) or die(&quot;Failed to load&quot;);
                
                //echo &quot;44: memberonly: &quot; . $xmldata-&gt;memberonly . &quot;&lt;br/&gt;&quot;;
                
                return $xmldata-&gt;memberonly;
                
            } else {
                
                //echo &quot;file &quot; . $page_url . &quot;.xml not found&lt;br/&gt;&quot;;
                return false;
                
            }
            
        } else {
            
            //echo &quot;simplexml functions are not available.&lt;br/&gt;&quot;;
            return false;
            
        }
        
        return false;
        
    }   // END Fucntion get_file_restrictions()
    
    
//  
//  Create the menu
//  
    // 
    private function process_page($pagesArray, $pageKey, $langCode, $currentLevel, $endLevel) {
        
        $pageArray = $pagesArray[$pageKey];
        
        //console_log(&#039;Text 76: &#039;, &#039;Text 76: &#039;);
        //console_log(&#039;Text 76: &#039;, $pageArray);
        
        
        $file_restrictions = $this-&gt;get_file_restrictions($pageArray[&#039;url&#039;]);
        // file_restrictions are comma-sep. strings (feule Group names wie &#039;Users&#039;)
        
        echo &quot;87: file_restrictions: &quot; . $file_restrictions . &quot;&lt;br&gt;&quot;;
        
        // Either no file restrictions for page (&#039;&#039;) or FEULE not active (false)
        if ($file_restrictions !== false || $file_restrictions !== &#039;&#039;){
            
            $currentUserGroups = $this-&gt;determine_user_groups();
            // Is array
            
            //if (function_exists(&#039;check_permissions&#039;)) { // FEULE is active
                
            $permission_check = $this-&gt;check_permissions($currentUserGroups, $file_restrictions);
                
            echo &quot;161: permission_check: &quot; . $permission_check . &quot;&lt;br&gt;&quot;;
            
        } else {
            
            echo &quot;file_restrictions not found&quot;;
            
        }
        
        if ($permission_check || $file_restrictions == &#039;&#039; || $file_restrictions == false ){
            
//            echo &quot;&lt;ul&gt;&quot;;
            
            $this-&gt;echo_link($pageArray, $this-&gt;css_class_page_link, $langCode);
            
            // &#039;children&#039; key only exists if child pages are present
            if (array_key_exists(&#039;children&#039;, $pageArray)){
                
//              echo &quot;currentLevel: &quot; . $currentLevel . &quot;&lt;br&gt;&quot;;
//              echo &quot;page has children&lt;br&gt;&quot;;
                
                if ($currentLevel &lt; $endLevel) {
                    
                    $currentLevel = $currentLevel +1;
                    
                    echo &quot;&lt;li class=&#039;no-bullet&#039;&gt;&quot;;
                    echo &quot;&lt;ul&gt;&quot;;
                    
                    $childArray = $pageArray[&#039;children&#039;];
                    
                    foreach ($childArray as $childKey) {
                    
$parse_child_elements = $this-&gt;process_page($pagesArray, $childKey, $langCode, $currentLevel, $endLevel);
                    
                    }
                    
                    echo &quot;&lt;/ul&gt;&quot;;
                    echo &quot;&lt;/li&gt;&quot;;
                    
                    $currentLevel = $currentLevel -1;
                    
                }
                
            } else {
            
               //echo &quot;page has no children&lt;br&gt;&quot;;
                
            }   // END if (has children)
            
            //$this-&gt;echo_link($i18n_pages[$pageArray], $this-&gt;css_class_page_link, $langCode);
            
//            echo &quot;&lt;/ul&gt;&quot;;
            
        }   // END if ($permission_check)
        
        return true;
        
    }
    
    
//  
//  Create the menu
//  
    // Add a link to the page html
    private function echo_link($page_array, $css_class, $langCode) {
        
        //console_log(&#039;Text 147: &#039;, $page_array);
        
        echo &quot;&lt;li&gt;&quot;;
        if ( $langCode == &#039;default&#039; ) {
            echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
        } else {
            // Check if page for non-default language exists
            if ( array_key_exists( &quot;title_&quot;.$langCode, $page_array )) {
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title_&quot;.$langCode] . &quot;&lt;/a&gt;&quot;;
            } else {
                // Fall back to default language page
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
            }
        }
        
        echo &quot;&lt;/li&gt;&quot;;

        return true;
        
    }
    
    
//
// Check permissions for user groups and file restrictions.
//
    //
    private function check_permissions($currentUserGroups, $file_restrictions) {
        
        //echo &quot;Starting fcn check_permissions &lt;br&gt;&quot;;
        
        $permission = false;
        
        if (strpos($file_restrictions, &quot;Unauthorized&quot;) !== false){
            
            //echo &quot;userGroup: Unauthorized found&lt;br&gt;&quot;;
            
            $permission = true;
            
        } else {
            
            foreach($currentUserGroups as $userGroup) {
                
                //echo &quot;Checking for userGroup: &quot; . $userGroup . &quot;&lt;br&gt;&quot;;
                
                if( $userGroup == &quot;Admin&quot;){     // Admin members can see all pages
                    
                    return true;
                    
                } else {
                
                    $pos = strpos($file_restrictions, $userGroup );
                    
                    if( $pos !== false){
                        //echo &quot;Permission for userGroup: &quot; . $userGroup . &quot; found&lt;br&gt;&quot;;
                        $permission = true;
                    }
                    
                }
                
            }   //END foreach()
            
        }
        
        return $permission;
        
    }   //END fcn check_permissions()
    
    
//
// Parse each page element in the i18n_pages array.
//
    // Parse each top level page element
    public function parse_elements ($pagesArray, $langCode, $currentLevel, $endLevel){
        
        //console_log(&#039;Text 221:&#039;, $langCode);
        
//      echo $langCode . $currentLevel . $endLevel;
        
        echo &quot;&lt;ul&gt;&quot;;
        
        // loops through all pages
        foreach($pagesArray as $pageKey =&gt; $pageArray) {
            
//          echo &quot;&lt;br&gt;&quot;;
//          echo &quot;Key:&quot; . $pageKey . &quot;&lt;br&gt;&quot;;
            
            //echo &quot;MenuStatus:&quot; . $pageArray[&quot;menuStatus&quot;] . &quot;&lt;br&gt;&quot;;
            
            // Ignore last element in array
            // Last element lists all top level pages
            if($pageKey != &#039;&#039; ){
                
                // Do page settings allow display?
                // menuStatus &#039;Y&#039; means page is to be shown in menu(s)
                // (unlike, for example, the search results page)
                if($pageArray[&quot;menuStatus&quot;] == &quot;Y&quot; ){
                    
                    // Is page not a subpage?
                    // &#039;parent&#039; key always exists, value can be empty
                    // If a page has a parent it will be called with the child pages of the parent
                    if ($pageArray[&quot;parent&quot;] == &quot;&quot;){
                        
//                      echo &quot;Ready to process page[&#039;url&#039;]: &quot; . $pageArray[&#039;url&#039;] . &quot;&lt;br&gt;&quot;;
                        
                        //echo &quot;page has no parent&lt;br&gt;&quot;;
                        
                        //console_log(&#039;Text 253:&#039;, $pageArray);
                        
                        $pageProcessor = $this-&gt;process_page($pagesArray, $pageKey, $langCode, $currentLevel, $endLevel);
                        // Is array
                        
                    } else {    // Page is a sub-page, so will be displayed as such
                        
                      //echo &quot;page has parent&lt;br&gt;&quot;;
                        
                    }   // END if ($pageArray[&quot;parent&quot;])
                    
               }    // END if($pageArray[&quot;menuStatus&quot;])
                
           }    // END if($pageKey != &#039;&#039;)
            
        }    // END foreach($pagesArray ...)
        
        echo &quot;&lt;/ul&gt;&quot;;
        
    }    // END fcn. parse_elements()
    
    
    public function debug(){
        
        foreach(debug_backtrace() as $t) {
            echo $t[&#039;file&#039;] . &#039; line &#039; . $t[&#039;line&#039;] . &#039; calls &#039; . $t[&#039;function&#039;] . &quot;()&lt;br/&gt;&quot;;
        }
        
    }
    
}    // END class feule_menu_aside

// - - - - - - - - - - - - - - - - - - - - -
// START - Get the list of pages
// Is a flat array - can be listed using &#039;print_r($pagesArray)&#039; below
$pagesArray = return_i18n_pages();


//echo &quot;&lt;pre&gt;&quot;;
//print_r($pagesArray);
//echo &quot;&lt;/pre&gt;&quot;;


// CAUTION! DO NOT ACTIVATE FUNCTION N MOBILE AND ASIDE VERSIONS WITH THE SAME NAME
//
//function console_log( $text, $data ){
//  echo $text;
//  echo &#039;&lt;script&gt;&#039;;
//echo &#039;console.log(&#039;.$text.&#039;)&#039;;
//  echo &#039;console.log(&#039;. json_encode( $data ) .&#039;)&#039;;
//  echo &#039;&lt;/script&gt;&#039;;
//}


// Determine code for current language 
// (args is set by i18n call in navigation.inc.php)
global $args;
$language = $args[0];
//echo &quot;Language: &quot; . $language . &quot;&lt;br&gt;&quot;;
$endLevel = $args[1];
$currentLevel = 0;


// Determine if language code is default
// (Required as default language elements are specified 
//  in $i18n_pages arrays without a code
//  e.g. &#039;title&#039; instead of &#039;title_de&#039;.)
foreach($pagesArray[&#039;index&#039;] as $pageKey =&gt; $pageArray) {
    //echo &quot;Test: &quot; . $x . &quot;: &quot; . $x_value . &quot;&lt;br&gt;&quot;;
    if ( substr( $pageKey, 0, 6 )== &quot;title_&quot; ){
        //echo &quot;title_ found&lt;br&gt;&quot;;
        if ( substr( $pageKey, -2 ) ==  $language ) {
            $langCode = $language;
        } else {
            $langCode = &#039;default&#039;;
        }
    }
}
//echo &quot;langCode: &quot; . $langCode  . &quot;&lt;br&gt;&quot;;

$feule_menu_mobil = new feule_menu_mobil();

$feule_menu_mobil -&gt; parse_elements($pagesArray, $langCode, $currentLevel, $endLevel);

?&gt;

    &lt;/nav&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[FEULE_SubMenu]]></title><slug>feule_submenu</slug><value><![CDATA[&lt;!-- Component is called in main congtent block --&gt;

&lt;?php

class feule_submenu {
    
    
    private $css_class_page_link = &quot;page-link&quot;;
    private $css_class_subpage_link = &quot;subpage-link&quot;;
    
//
//  Determine which user group(s) any logged on user is a member of.
//
    private function determine_user_groups(){
        
        if (function_exists(&#039;getCurrentUserGroups&#039;)){
            
            $currentUserGroups = getCurrentUserGroups();
            
            //echo &quot;Current User Group(s): &quot;;
            
            //foreach($currentUserGroups as $userGroup) {
                
                //echo $userGroup . &quot;, &quot;;
                
            //}
            
            //echo &quot;&lt;br&gt;&quot;;
            
            return $currentUserGroups;
            
        } else {
        
            //echo &quot;36: function getCurrentUserGroups() does not exist&quot; . &quot;&lt;br&gt;&quot;;
            return false;
        
        }
        
    }
    
//  
//  Create the menu
//  
    // Add a link to the page html
    private function echo_link($page_array, $css_class, $langCode) {
        
        //console_log(&#039;Text 147: &#039;, $page_array);
        
        echo &quot;&lt;li&gt;&quot;;
        if ( $langCode == &#039;default&#039; ) {
            echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
        } else {
            // Check if page for non-default language exists
            if ( array_key_exists( &quot;title_&quot;.$langCode, $page_array )) {
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title_&quot;.$langCode] . &quot;&lt;/a&gt;&quot;;
            } else {
                // Fall back to default language page
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
            }
        }
        
        echo &quot;&lt;/li&gt;&quot;;

        return true;
        
    }
    
    
//
// Check permissions for user groups and file restrictions.
//
    //
    private function check_permissions($currentUserGroups, $file_restrictions) {
        
        //echo &quot;Starting fcn check_permissions &lt;br&gt;&quot;;
        
        $permission = false;
        
        if (strpos($file_restrictions, &quot;Unauthorized&quot;) !== false){
            
            //echo &quot;userGroup: Unauthorized found&lt;br&gt;&quot;;
            
            $permission = true;
            
        } else {
            
            foreach($currentUserGroups as $userGroup) {
                
                //echo &quot;Checking for userGroup: &quot; . $userGroup . &quot;&lt;br&gt;&quot;;
                
                if( $userGroup == &quot;Admin&quot;){     // Admin members can see all pages
                    
                    return true;
                    
                } else {
                
                    $pos = strpos($file_restrictions, $userGroup );
                    
                    if( $pos !== false){
                        //echo &quot;Permission for userGroup: &quot; . $userGroup . &quot; found&lt;br&gt;&quot;;
                        $permission = true;
                    }
                    
                }
                
            }   //END foreach()
            
        }
        
        return $permission;
        
    }   //END fcn check_permissions()
    
    
//
//
//  &#039;simplexml&#039; is PHP Extension used to determine the viewing restrictions
//
    private function get_file_restrictions($page_url) {
        
        if (function_exists(&#039;simplexml_load_file&#039;)) {
            
            //echo &quot;simplexml functions are available.&lt;br /&gt;\\n&quot;;
            
            if (file_exists(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;)) {
                
                //echo &quot;129: file &quot; . $page_url . &quot;.xml found&lt;br/&gt;&quot;;
                
                $xmldata = simplexml_load_file(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;) or die(&quot;Failed to load&quot;);
                
                //echo &quot;132: memberonly: &quot; . $xmldata-&gt;memberonly . &quot;&lt;br/&gt;&quot;;
                
                return $xmldata-&gt;memberonly;
                
            } else {
                
                //echo &quot;138: file &quot; . $page_url . &quot;.xml not found&lt;br/&gt;&quot;;
                return false;
                
            }
            
        } else {
            
            //echo &quot;simplexml functions are not available.&lt;br/&gt;&quot;;
            return false;
            
        }
        
        return false;
        
    }   // END Fucntion get_file_restrictions()
    
    
//  
//  Create the menu
//  
    // 
    private function process_page($pagesArray, $pageKey, $langCode, $levelCount, $numberLevels) {
        
        $pageArray = $pagesArray[$pageKey];
        
        //echo &quot;164: pageKey: &quot; . $pageKey . &quot;, Parent: &quot; . $pageArray[&quot;parent&quot;] . &quot;, levelCount: &quot; . $levelCount . &quot;&lt;br&gt;&quot;;
        
        //console_log(&#039;Text 76: &#039;, &#039;Text 76: &#039;);
        //console_log(&#039;Text 76: &#039;, $pageArray);
        
        // file_restrictions are comma-sep. strings (feule Group names wie &#039;Users&#039;)
        $file_restrictions = $this-&gt;get_file_restrictions($pageArray[&#039;url&#039;]);
        
        //echo &quot;172: file_restrictions: &quot; . $file_restrictions . &quot;&lt;br&gt;&quot;;
        
        // Either no file restrictions for current page (&#039;&#039;) or FEULE not active (false)
        if ($file_restrictions == false || $file_restrictions == &#039;&#039;){
            
            //echo &quot;177: file_restrictions not found&quot; . &quot;&lt;br&gt;&quot;;
            
        } else {
            
            // Is array
            $currentUserGroups = $this-&gt;determine_user_groups();
            
            //echo &quot;184: currentUserGroups: &quot; . $currentUserGroups;
            
            if ($currentUserGroups !== false) { // FEULE is active
                
                $permission_check = $this-&gt;check_permissions($currentUserGroups, $file_restrictions);
                
                //echo &quot;190: permission_check: &quot; . $permission_check . &quot;&lt;br&gt;&quot;;
                
            } else {
                
                $permission_check = 1;
                
            }
            
        }
        
        //echo &quot;200: file_restrictions: &quot; . $file_restrictions . &quot;, permission_check: &quot; . $permission_check . &quot;&lt;br&gt;&quot;;
        
        if ( $file_restrictions == &#039;&#039; || $file_restrictions == false || $permission_check){
            
//            echo &quot;&lt;ul&gt;&quot;;
            
            //echo &quot;204: levelCount: &quot; . $levelCount . &quot;, pageArray[&#039;parent&#039;]: &quot; . $pageArray[&quot;parent&quot;] . &quot;&lt;br&gt;&quot;;
            
            if ($levelCount !== 0 || $pageArray[&quot;parent&quot;] == &#039;&#039;){
                
                $this-&gt;echo_link($pageArray, $this-&gt;css_class_page_link, $langCode);
                
            }
            
            // &#039;children&#039; key only exists if child pages are present
            if (array_key_exists(&#039;children&#039;, $pageArray)){
                
              //echo &quot;217: levelCount: &quot; . $levelCount . &quot;&lt;br&gt;&quot;;
              //echo &quot;218: page has children&lt;br&gt;&quot;;
                
                if ($levelCount &lt; $numberLevels) {
                    
                    $levelCount = $levelCount +1;
                    
                    echo &quot;&lt;li class=&#039;no-bullet&#039;&gt;&quot;;
                    echo &quot;&lt;ul&gt;&quot;;
                    
                    $childArray = $pageArray[&#039;children&#039;];
                    
                    foreach ($childArray as $childKey) {
                    
                        //echo &quot;221: Child: &quot; . $childKey . &quot;&lt;br&gt;&quot;;
                    
$parse_child_elements = $this-&gt;process_page($pagesArray, $childKey, $langCode, $levelCount, $numberLevels);
                    
                    }
                    
                    echo &quot;&lt;/ul&gt;&quot;;
                    echo &quot;&lt;/li&gt;&quot;;
                    
                    $levelCount = $levelCount -1;
                    
                }
                
            } else {
            
               //echo &quot;page has no children&lt;br&gt;&quot;;
                
            }   // END if (has children)
            
            //$this-&gt;echo_link($i18n_pages[$pageArray], $this-&gt;css_class_page_link, $langCode);
            
//            echo &quot;&lt;/ul&gt;&quot;;
            
        }   // END if ($permission_check)
        
        return true;
        
    }       // END Function process_page()
    
    
//
// Parse each page element in the i18n_pages array.
//
    // Parse each top level page element
    public function parse_elements ($pagesArray, $langCode, $parentPage, $levelCount, $numberLevels){
        
        //console_log(&#039;Text 221:&#039;, $langCode);
        
        //echo &quot;265: langCode: &quot; . $langCode . &quot;, parentPage: &quot; . $parentPage  . &quot;, levelCount: &quot; . $levelCount  . &quot;, numberLevels: &quot; . $numberLevels . &quot;&lt;br&gt;&quot;;
        
        echo &quot;&lt;ul&gt;&quot;;
        
        // Should menu be generated from the top level down or from a specific (parent) page?
        if ($parentPage == &quot;&quot;) {
            
            // Loop through all pages
            foreach($pagesArray as $pageKey =&gt; $pageArray) {
                
    //          echo &quot;&lt;br&gt;&quot;;
    //          echo &quot;Key:&quot; . $pageKey . &quot;&lt;br&gt;&quot;;
                
                //echo &quot;MenuStatus:&quot; . $pageArray[&quot;menuStatus&quot;] . &quot;&lt;br&gt;&quot;;
                
                // Ignore last element in array
                // Last element lists all top level pages
                if($pageKey != &#039;&#039; ){
                    
                    // Do page settings allow display?
                    // menuStatus &#039;Y&#039; means page is to be shown in menu(s)
                    // (unlike, for example, the search results page)
                    if($pageArray[&quot;menuStatus&quot;] == &quot;Y&quot; ){
                        
                        // Is page not a subpage?
                        // &#039;parent&#039; key always exists, value can be empty
                        // If a page has a parent it will be called with the child pages of the parent
                        if ($pageArray[&quot;parent&quot;] == &quot;&quot;){
                            
    //                      echo &quot;Ready to process page[&#039;url&#039;]: &quot; . $pageArray[&#039;url&#039;] . &quot;&lt;br&gt;&quot;;
                            
                            //echo &quot;page has no parent&lt;br&gt;&quot;;
                            
                            //console_log(&#039;Text 253:&#039;, $pageArray);
                            
                            $pageProcessor = $this-&gt;process_page($pagesArray, $pageKey, $langCode, $levelCount, $numberLevels);
                            // Is array
                            
                        } else {    // Page is a sub-page, so will be displayed as such
                            
                          //echo &quot;page has parent&lt;br&gt;&quot;;
                            
                        }   // END if ($pageArray[&quot;parent&quot;])
                        
                   }    // END if($pageArray[&quot;menuStatus&quot;])
                    
               }// END if($pageKey != &#039;&#039;)
                
            }    // END foreach($pagesArray ...)
            
       // Generate menu from a specific (parent) page
       } else {
            
            //echo &quot;322: parentPage: &quot; . $parentPage . &quot;&lt;br&gt;&quot;;
            
            $pageArray = $pagesArray[$parentPage];
            
            if ($pageArray[&quot;menuStatus&quot;] == &quot;Y&quot;) {
                
                //echo &quot;menuStatus: Y&lt;br&gt;&quot;;
                
                $levelCount = $levelCount + 1;
                
                foreach($pageArray[&quot;children&quot;] as $pageKey =&gt; $pageName) {
                
                    //echo &quot;334: pageKey: &quot; . $pageKey . &quot;, pageName: &quot; . $pageName . &quot;&lt;br&gt;&quot;;
                    
                    $pageProcessor = $this-&gt;process_page($pagesArray, $pageName, $langCode, $levelCount, $numberLevels);
                }
                
            }
            
        }   // END if ($parentPage ...)
        
        echo &quot;&lt;/ul&gt;&quot;;
        
    }    // END fcn. parse_elements()
    
    
    public function debug(){
        
        foreach(debug_backtrace() as $t) {
            echo $t[&#039;file&#039;] . &#039; line &#039; . $t[&#039;line&#039;] . &#039; calls &#039; . $t[&#039;function&#039;] . &quot;()&lt;br/&gt;&quot;;
        }
        
    }
    
}    // END class feule_submenu

// - - - - - - - - - - - - - - - - - - - - -
// START - Get the list of pages
// Is a flat array - can be listed using &#039;print_r($pagesArray)&#039; below
$pagesArray = return_i18n_pages();


//echo &quot;&lt;pre&gt;&quot;;
//print_r($pagesArray);
//echo &quot;&lt;/pre&gt;&quot;;


// CAUTION! DO NOT ACTIVATE FUNCTION N MOBILE AND ASIDE VERSIONS WITH THE SAME NAME
//
//function console_log( $text, $data ){
//  echo $text;
//  echo &#039;&lt;script&gt;&#039;;
//echo &#039;console.log(&#039;.$text.&#039;)&#039;;
//  echo &#039;console.log(&#039;. json_encode( $data ) .&#039;)&#039;;
//  echo &#039;&lt;/script&gt;&#039;;
//}


// Determine code for current language 
// (args is set by i18n call in navigation.inc.php)
global $args;
$language = $args[0];
//echo &quot;Language: &quot; . $language . &quot;&lt;br&gt;&quot;;
$parentPage = $args[1];
//echo &quot;parentPage: &quot; . $parentPage . &quot;&lt;br&gt;&quot;;
$numberLevels = $args[2];
$levelCount = 0;


// Determine if language code is default
// (Required as default language elements are specified 
//  in $i18n_pages arrays without a code
//  e.g. &#039;title&#039; instead of &#039;title_de&#039;.)
foreach($pagesArray[&#039;index&#039;] as $pageKey =&gt; $pageArray) {
    //echo &quot;Test: &quot; . $x . &quot;: &quot; . $x_value . &quot;&lt;br&gt;&quot;;
    if ( substr( $pageKey, 0, 6 )== &quot;title_&quot; ){
        //echo &quot;title_ found&lt;br&gt;&quot;;
        if ( substr( $pageKey, -2 ) ==  $language ) {
            $langCode = $language;
        } else {
            $langCode = &#039;default&#039;;
        }
    }
}
//echo &quot;langCode: &quot; . $langCode  . &quot;&lt;br&gt;&quot;;

$feule_submenu = new feule_submenu();

$feule_submenu -&gt; parse_elements($pagesArray, $langCode, $parentPage, $levelCount, $numberLevels);

?&gt;
]]></value></item><item><title><![CDATA[FEULE_UserArea]]></title><slug>feule_userarea</slug><value><![CDATA[&lt;!-- Component called in aside_feule_userarea.inc.php --&gt;
&lt;!--2021-12-21 12:40--&gt;

&lt;h2&gt;User Area&lt;/h2&gt;

&lt;script&gt;
    
    function closeForm(elementClass) {
        //console.log(&quot;closeForm: &quot; + elementClass);
        document.querySelector(elementClass).classList.toggle(&quot;show-form&quot;);
    }
    
    function toggleForm(elementClass) {
        
        //console.log(&quot;toggleForm: &quot; + elementClass);
        
        let selector = &quot;div.&quot; + elementClass;
        let activeFormElement = document.querySelector(selector);
        //console.log(&quot;activeFormElement.nodeName: &quot; + activeFormElement.nodeName);
        
        // Toggle active link and sibling links
        let formParentElement = activeFormElement.parentElement;
        //console.log(&quot;formParentElement.nodeName: &quot; + linkParentElement.nodeName);
        let childFormElements = formParentElement.children;
        //console.log(&quot;childFormElementCount: &quot; + childFormElements.length);
        for (let i=0; i &lt; childFormElements.length; i++) {
            
            //console.log(&quot;childFormElement&quot; + i + &quot;: &quot; + childFormElements[i].className);
            
            // Is current active form?
            if(childFormElements[i].classList.contains(elementClass)){
                if (childFormElements[i].classList.contains(&#039;show-form&#039;)) {
                    //console.log(&quot;show-form found for: &quot; . elementClass);
                } else {
                    //console.log(&quot;show-form not found for: &quot; . elementClass);
                }
                childFormElements[i].classList.toggle(&#039;show-form&#039;);
            } else {
                // Is another form still being shown?
                if (childFormElements[i].classList.contains(&#039;show-form&#039;)) {
                    //console.log(&quot;show-form found for: &quot; . elementClass);
                    childFormElements[i].classList.toggle(&#039;show-form&#039;);
                }
            }
        }
        if (activeFormElement.classList.contains(&#039;show-form&#039;)) {
            //console.log(&quot;show-form found &quot;);
        } else {
            //console.log(&quot;show-form not found &quot;);
        }
        //document.querySelector(selector).classList.toggle(&quot;show-form&quot;);
        
        let el = document.querySelector(selector + &quot; h2&quot;);
        //el.style.color = &quot;green&quot;;
        el.addEventListener(&quot;click&quot;, function() { closeForm(selector) }, false)
    }
    
    function toggleForms (elementClass, language) {
        
        console.log(&quot;Fcn toggleForms: &quot; + elementClass + &quot;, lang: &quot; + language);
        let selector = &quot;a.&quot; + elementClass;
        let activeElement = document.querySelector(selector);
        //console.log(&quot;activeElement.nodeName: &quot; + activeElement.nodeName);
        
        // Toggle active link and sibling links
        let linkParentElement = activeElement.parentElement;
        //console.log(&quot;linkParentElement.nodeName: &quot; + linkParentElement.nodeName);
        let childElements = linkParentElement.children;
        //console.log(&quot;childElementCount: &quot; + childElements.length);
        for (let i=0; i &lt; childElements.length; i++) {
            
            //console.log(&quot;childElement&quot; + i + &quot;: &quot; + childElements[i].className);
            
            // Is current active link?
            if(childElements[i].classList.contains(elementClass)){
                if (childElements[i].classList.contains(&#039;active&#039;)) {
                    //console.log(&quot;show-form  &quot;);
                } else {
                    ///console.log(&quot;active not found &quot;);
                }
                childElements[i].classList.toggle(&#039;active&#039;);
            } else {
                // Is another link still being shwon as active?
                if (childElements[i].classList.contains(&#039;active&#039;)) {
                    childElements[i].classList.toggle(&#039;active&#039;);
                }
            }
        }
        
        if(elementClass == &quot;feule-login&quot;){
            //console.log(&quot;Clicked on: &quot; + elementClass);
            //let successCheck = checkSuccess(elementClass);
            //console.log(&quot;successCheck: &quot; + successCheck);
            toggleForm(elementClass);
        } else {
            if(elementClass == &quot;feule-register&quot;){
            //console.log(&quot;Clicked on: &quot; + elementClass);
            toggleForm(elementClass);
            } else {
                //let pageAddress = location.origin + location.pathname;
                //console.log(&quot;pageAddress: &quot; + pageAddress);
                if(elementClass == &quot;feuleForgotPass&quot;){
                    //console.log(&quot;window.location: &quot; + window.location);
                    window.location.href = &quot;?lang=&quot; + language + &quot;&amp;forgotPass=1&amp;lang=&quot; + language;
                } else {
                    if (elementClass == &quot;feuleForgotUser&quot;){
                        //console.log(&quot;window.location: &quot; + window.location);
                        window.location.href = &quot;?lang=&quot; + language + &quot;&amp;forgotUser=1&amp;lang=&quot; + language;
                    }
                }
            }
        }
    }
    
&lt;/script&gt;

&lt;?php
    if (is_dir(&quot;./data/enhanced-site-groups/&quot;) &amp;&amp; function_exists(&#039;welcome_message_login&#039;) ){
        
        //echo &quot;FEULE has been installed and intialised and is active.&lt;br&gt;&quot;;
            
        // Determine code for current language
        // (args is set by i18n call in navigation.inc.php)
        global $args;
        $language = $args[0];
        //echo &quot;Language: &quot; . $language . &quot;&lt;br&gt;&quot;;
        
        // No containing div for welcome container as presence/absense of welcome container
        // is used to trigger css3 sibling combinator to hide &#039;feule-form-links&#039; container.
        welcome_message_login();
        
        // div classes are same as classes of links set in function show_feule_forms()
        echo &#039;&lt;div class=&quot;feule-login inactive&quot;&gt;&#039;;
        show_login_box();
        echo &#039;&lt;/div&gt;&#039;;
        
        echo &#039;&lt;div class=&quot;feule-register inactive&quot;&gt;&#039;;
        user_login_register();
        echo &#039;&lt;/div&gt;&#039;;
        
        function show_feule_forms($lang) {
            
            //echo &quot;Language: &quot; . $lang . &quot;&lt;br&gt;&quot;;
            
            echo &quot;&lt;div class=&#039;feule-form-links&#039;&gt;&quot;;
            
                echo &quot;&lt;p&gt;&quot;;
                
                    echo &quot;&lt;a href=# class=&#039;feule-login&#039; onclick=&#039;toggleForms(\\&quot;feule-login\\&quot;,\\&quot;&quot; . $lang . &quot;\\&quot;)&#039;&gt;Login&lt;/a&gt;&quot;;
                    //echo &#039;&lt;a class=&quot;feule-login&quot; onclick=&quot;toggleForms(\\&#039;feule-login\\&#039;)&quot;&gt;Login&lt;/a&gt;&#039;;
                    
                    echo &quot;&lt;a href=# class=&#039;feule-register&#039; onclick=&#039;toggleForms(\\&quot;feule-register\\&quot;,\\&quot;&quot; . $lang . &quot;\\&quot;)&#039;&gt;Register&lt;/a&gt;&quot;;
                    
                    echo &quot;&lt;a href=# class=&#039;feuleForgotPass&#039; onclick=&#039;toggleForms(\\&quot;feuleForgotPass\\&quot;,\\&quot;&quot; . $lang . &quot;\\&quot;)&#039;&gt;Forgot&amp;nbsp;Pass?&lt;/a&gt;&quot;;
                    
                    //$elementClass = &quot;feuleForgotPass&quot;;
                    //echo &quot;&lt;a href=# class=&#039;feuleForgotPass&#039; onclick=&#039;toggleForms(\\&quot;&quot; . $elementClass . &quot;\\&quot;,\\&quot;&quot; . $lang . &quot;\\&quot;)&#039;&gt; Forgotten&amp;nbsp;Pass?&lt;/a&gt;&quot;;
                    
                    echo &quot;&lt;a href=# class=&#039;feuleForgotUser&#039; onclick=&#039;toggleForms(\\&quot;feuleForgotUser\\&quot;,\\&quot;&quot; . $lang . &quot;\\&quot;)&#039;&gt;Forgot&amp;nbsp;Username?&lt;/a&gt;&quot;;
                    //echo &quot;&lt;a class=&#039;feuleForgotUser&#039; href=&#039;?lang=en&amp;forgotUser=1&amp;lang=en&#039;&gt;Forgotten&amp;nbsp;Username?&lt;/a&gt;&quot;;
                    
                    //echo &#039;&lt;a href=# onclick=&quot;return ReAssign(\\&#039;&#039; + $valuationId + &#039;\\&#039;,\\&#039;&#039; + $user + &#039;\\&#039;)&quot;&gt;Re-Assign&lt;/a&gt;&#039;;
                    //echo &quot;&lt;a class=&#039;feuleForgotPass&#039; href=&#039;?lang=en&amp;forgotPass=1&amp;lang=en&#039;&gt;Forgotten&amp;nbsp;Password?&lt;/a&gt;&quot;;
                    
                echo &quot;&lt;/p&gt;&quot;;
                
            echo &quot;&lt;/div&gt;&quot;;
            
        }    // END fcn. show_forms()
        
        show_feule_forms($language);
        
    } else {
        
        if (is_dir(&quot;./data/enhanced-site-groups/&quot;)) {
            
            echo &quot;FEULE has been initialised but is not active.&lt;br&gt;&quot;;
            
        } else {
            
            echo &quot;FEULE has either not been installed or not been intialised.&lt;br&gt;&quot;;
            
        };
        
    };
    
?&gt;

&lt;script&gt;
    
    // Function is described below
    function checkSuccess(elementClass) {
        //console.log(&quot;Fcn. checkSuccess: &quot; + elementClass);
        let selector = &quot;div.&quot; + elementClass;
        let activeFormElement = document.querySelector(selector);
        // console.log(&quot;activeFormElement.nodeName: &quot; + activeFormElement.nodeName);
        if (activeFormElement.getElementsByClassName(&#039;error&#039;)[0]){
            let errorElement = document.getElementsByClassName(&#039;error&#039;)[0];
            //console.log(&#039;Error Element: &#039; + errorElement.textContent);
            toggleForm(elementClass);
        } else {
            //console.log(&#039;No Error Element &#039;);
        }
    }
    
    // Check if login has been successful
    // If unsuccessful, an element with class=&#039;error&#039; is added to the login form 
    // by the feule plugin. If checkSuccess() finds this error element, the 
    // login form will be toggled open.
    checkSuccess(&quot;feule-login&quot;);
    
&lt;/script&gt;
]]></value></item><item><title><![CDATA[SearchQueryRenderer]]></title><slug>searchqueryrenderer</slug><value><![CDATA[&lt;ul&gt;
&lt;?php if (@$_REQUEST[&#039;words&#039;]) {?&gt;&lt;!-- From Search Form --&gt;
    &lt;li&gt;
        &lt;?php  echo htmlspecialchars($_REQUEST[&#039;words&#039;]); ?&gt;
    &lt;/li&gt;
&lt;?php  } ?&gt;
&lt;?php if (@$_REQUEST[&#039;tags&#039;]) {?&gt;&lt;!-- From Tag Cloud --&gt;
    &lt;li&gt;
        &lt;?php  echo htmlspecialchars($_REQUEST[&#039;tags&#039;]); ?&gt;
    &lt;/li&gt;
&lt;?php  } ?&gt;
&lt;/ul&gt;]]></value></item><item><title><![CDATA[SearchResultRenderer]]></title><slug>searchresultrenderer</slug><value><![CDATA[&lt;h3 class=&quot;search-entry-title&quot;&gt;
  &lt;?php if ($showLanguage) { ?&gt;
  &lt;span class=&quot;search-entry-language&quot;&gt;
    &lt;?php echo htmlspecialchars($item-&gt;language, ENT_NOQUOTES); ?&gt;
  &lt;/span&gt;
  &lt;?php } ?&gt;
  &lt;a href=&quot;&lt;?php echo $item-&gt;link; ?&gt;&quot;&gt;
    &lt;?php echo htmlspecialchars($item-&gt;title, ENT_NOQUOTES); ?&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;?php if ($showDate) { ?&gt;
&lt;div class=&quot;search-entry-date&quot;&gt;
  &lt;?php echo strftime($dateFormat, $item-&gt;pubDate); ?&gt;
&lt;/div&gt;
&lt;?php } ?&gt;
&lt;div class=&quot;search-entry-excerpt&quot;&gt;
  &lt;?php echo $item-&gt;getExcerpt($item-&gt;content, $numWords); ?&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[SidebarNav]]></title><slug>sidebarnav</slug><value><![CDATA[&lt;!-- AA Replaces Sidebar --&gt;
&lt;!-- Called in sidebar.inc.php --&gt;
&lt;h2&gt;Navigation&lt;/h2&gt;
&lt;ul&gt;
&lt;!-- Only show pages in menu, not all pages --&gt;
&lt;?php get_i18n_navigation(&#039;index&#039;,0,99,I18N_SHOW_MENU); ?&gt;
&lt;/ul&gt;]]></value></item><item><title><![CDATA[SliderIcon]]></title><slug>slidericon</slug><value><![CDATA[&lt;!-- Called in pageheader.inc.php --&gt;

&lt;script&gt;
    function toggleSlider(el) {
        let sliderContainer = document.querySelector(&quot;.slider-r&quot;);
        let sliderContent= document.querySelector(&quot;.mobile-menu&quot;);
        sliderContainer .style.height = parseInt(sliderContent.offsetHeight) + 10 + &#039;px&#039;;
        sliderContainer .style.width = parseInt(sliderContent.offsetWidth) + 20 + &#039;px&#039;;

        el.classList.toggle(&quot;slider-icon-active&quot;);
        sliderContainer.classList.toggle(&quot;show-slider-r&quot;);
       // innerContainer.classList.toggle(&quot;hide-menu&quot;);
    }
&lt;/script&gt;

&lt;div class=&quot;slider-icon&quot; onclick=&quot;toggleSlider(this)&quot;&gt;
    &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[SliderMenu]]></title><slug>slidermenu</slug><value><![CDATA[&lt;!-- Component is called in header.inc.php --&gt;


&lt;div  class=&quot;slider-r show-slider-r&quot; &gt;
    &lt;nav class=&quot;mobile-menu&quot; &gt;

&lt;h2&gt;Menu&lt;/h2&gt;

&lt;?php

class slider_menu {
    
    
    private $css_class_page_link = &quot;page-link&quot;;
    private $css_class_subpage_link = &quot;subpage-link&quot;;
    
//
//  Determine which user group(s) any logged on user is a member of.
//
    private function determine_user_groups(){
        
        if (function_exists(&#039;getCurrentUserGroups&#039;)){
            
            $currentUserGroups = getCurrentUserGroups();
            
            //echo &quot;Current User Group(s): &quot;;
            
            //foreach($currentUserGroups as $userGroup) {
                
                //echo $userGroup . &quot;, &quot;;
                
            //}
            
            //echo &quot;&lt;br&gt;&quot;;
            
            return $currentUserGroups;
            
        } else {
        
            //echo &quot;36: function getCurrentUserGroups() does not exist&quot; . &quot;&lt;br&gt;&quot;;
            return false;
        
        }
        
    }
    
//  
//  Create the menu
//  
    // Add a link to the page html
    private function echo_link($page_array, $css_class, $langCode) {
        
        //console_log(&#039;Text 147: &#039;, $page_array);
        
        echo &quot;&lt;li&gt;&quot;;
        if ( $langCode == &#039;default&#039; ) {
            echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
        } else {
            // Check if page for non-default language exists
            if ( array_key_exists( &quot;title_&quot;.$langCode, $page_array )) {
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title_&quot;.$langCode] . &quot;&lt;/a&gt;&quot;;
            } else {
                // Fall back to default language page
                echo &quot;&lt;a href=&#039;&quot; . $page_array[&quot;url&quot;] . &quot;&#039; class=&#039;&quot; . $css_class . &quot;&#039;&gt;&quot; . $page_array[&quot;title&quot;] . &quot;&lt;/a&gt;&quot;;
            }
        }
        
        echo &quot;&lt;/li&gt;&quot;;

        return true;
        
    }
    
    
//
// Check permissions for user groups and file restrictions.
//
    //
    private function check_permissions($currentUserGroups, $file_restrictions) {
        
        //echo &quot;Starting fcn check_permissions &lt;br&gt;&quot;;
        
        $permission = false;
        
        if (strpos($file_restrictions, &quot;Unauthorized&quot;) !== false){
            
            //echo &quot;userGroup: Unauthorized found&lt;br&gt;&quot;;
            
            $permission = true;
            
        } else {
            
            foreach($currentUserGroups as $userGroup) {
                
                //echo &quot;Checking for userGroup: &quot; . $userGroup . &quot;&lt;br&gt;&quot;;
                
                if( $userGroup == &quot;Admin&quot;){     // Admin members can see all pages
                    
                    return true;
                    
                } else {
                
                    $pos = strpos($file_restrictions, $userGroup );
                    
                    if( $pos !== false){
                        //echo &quot;Permission for userGroup: &quot; . $userGroup . &quot; found&lt;br&gt;&quot;;
                        $permission = true;
                    }
                    
                }
                
            }   //END foreach()
            
        }
        
        return $permission;
        
    }   //END fcn check_permissions()
    
    
//
//
//  &#039;simplexml&#039; is PHP Extension used to determine the viewing restrictions
//
    private function get_file_restrictions($page_url) {
        
        if (function_exists(&#039;simplexml_load_file&#039;)) {
            
            //echo &quot;simplexml functions are available.&lt;br /&gt;\\n&quot;;
            
            if (file_exists(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;)) {
                
                //echo &quot;129: file &quot; . $page_url . &quot;.xml found&lt;br/&gt;&quot;;
                
                $xmldata = simplexml_load_file(&quot;./data/pages/&quot; . $page_url . &quot;.xml&quot;) or die(&quot;Failed to load&quot;);
                
                //echo &quot;132: memberonly: &quot; . $xmldata-&gt;memberonly . &quot;&lt;br/&gt;&quot;;
                
                return $xmldata-&gt;memberonly;
                
            } else {
                
                //echo &quot;138: file &quot; . $page_url . &quot;.xml not found&lt;br/&gt;&quot;;
                return false;
                
            }
            
        } else {
            
            //echo &quot;simplexml functions are not available.&lt;br/&gt;&quot;;
            return false;
            
        }
        
        return false;
        
    }   // END Fucntion get_file_restrictions()
    
    
//  
//  Create the menu
//  
    // 
    private function process_page($pagesArray, $pageKey, $langCode, $levelCount, $numberLevels) {
        
        $pageArray = $pagesArray[$pageKey];
        
        //echo &quot;164: pageKey: &quot; . $pageKey . &quot;, Parent: &quot; . $pageArray[&quot;parent&quot;] . &quot;, levelCount: &quot; . $levelCount . &quot;&lt;br&gt;&quot;;
        
        //console_log(&#039;Text 76: &#039;, &#039;Text 76: &#039;);
        //console_log(&#039;Text 76: &#039;, $pageArray);
        
        // file_restrictions are comma-sep. strings (feule Group names wie &#039;Users&#039;)
        $file_restrictions = $this-&gt;get_file_restrictions($pageArray[&#039;url&#039;]);
        
        //echo &quot;172: file_restrictions: &quot; . $file_restrictions . &quot;&lt;br&gt;&quot;;
        
        // Either no file restrictions for current page (&#039;&#039;) or FEULE not active (false)
        if ($file_restrictions == false || $file_restrictions == &#039;&#039;){
            
            //echo &quot;177: file_restrictions not found&quot; . &quot;&lt;br&gt;&quot;;
            
        } else {
            
            // Is array
            $currentUserGroups = $this-&gt;determine_user_groups();
            
            //echo &quot;184: currentUserGroups: &quot; . $currentUserGroups;
            
            if ($currentUserGroups !== false) { // FEULE is active
                
                $permission_check = $this-&gt;check_permissions($currentUserGroups, $file_restrictions);
                
                //echo &quot;190: permission_check: &quot; . $permission_check . &quot;&lt;br&gt;&quot;;
                
            } else {
                
                $permission_check = 1;
                
            }
            
        }
        
        //echo &quot;200: file_restrictions: &quot; . $file_restrictions . &quot;, permission_check: &quot; . $permission_check . &quot;&lt;br&gt;&quot;;
        
        if ( $file_restrictions == &#039;&#039; || $file_restrictions == false || $permission_check){
            
//            echo &quot;&lt;ul&gt;&quot;;
            
            //echo &quot;204: levelCount: &quot; . $levelCount . &quot;, pageArray[&#039;parent&#039;]: &quot; . $pageArray[&quot;parent&quot;] . &quot;&lt;br&gt;&quot;;
            
            if ($levelCount !== 0 || $pageArray[&quot;parent&quot;] == &#039;&#039;){
                
                $this-&gt;echo_link($pageArray, $this-&gt;css_class_page_link, $langCode);
                
            }
            
            // &#039;children&#039; key only exists if child pages are present
            if (array_key_exists(&#039;children&#039;, $pageArray)){
                
              //echo &quot;207: levelCount: &quot; . $levelCount . &quot;&lt;br&gt;&quot;;
              //echo &quot;208: page has children&lt;br&gt;&quot;;
                
                if ($levelCount &lt; $numberLevels) {
                    
                    $levelCount = $levelCount +1;
                    
                    echo &quot;&lt;li class=&#039;no-bullet&#039;&gt;&quot;;
                    echo &quot;&lt;ul&gt;&quot;;
                    
                    $childArray = $pageArray[&#039;children&#039;];
                    
                    foreach ($childArray as $childKey) {
                    
                        //echo &quot;221: Child: &quot; . $childKey . &quot;&lt;br&gt;&quot;;
                    
$parse_child_elements = $this-&gt;process_page($pagesArray, $childKey, $langCode, $levelCount, $numberLevels);
                    
                    }
                    
                    echo &quot;&lt;/ul&gt;&quot;;
                    echo &quot;&lt;/li&gt;&quot;;
                    
                    $levelCount = $levelCount -1;
                    
                }
                
            } else {
            
               //echo &quot;page has no children&lt;br&gt;&quot;;
                
            }   // END if (has children)
            
            //$this-&gt;echo_link($i18n_pages[$pageArray], $this-&gt;css_class_page_link, $langCode);
            
//            echo &quot;&lt;/ul&gt;&quot;;
            
        }   // END if ($permission_check)
        
        return true;
        
    }       // END Function process_page()
    
    
//
// Parse each page element in the i18n_pages array.
//
    // Parse each top level page element
    public function parse_elements ($pagesArray, $langCode, $parentPage, $levelCount, $numberLevels){
        
        //console_log(&#039;Text 221:&#039;, $langCode);
        
        //echo &quot;265: langCode: &quot; . $langCode . &quot;, parentPage: &quot; . $parentPage  . &quot;, levelCount: &quot; . $levelCount  . &quot;, numberLevels: &quot; . $numberLevels . &quot;&lt;br&gt;&quot;;
        
        echo &quot;&lt;ul&gt;&quot;;
        
        // Should menu be generated from the top level down or from a specific (parent) page?
        if ($parentPage == &quot;&quot;) {
            
            // Loop through all pages
            foreach($pagesArray as $pageKey =&gt; $pageArray) {
                
    //          echo &quot;&lt;br&gt;&quot;;
    //          echo &quot;Key:&quot; . $pageKey . &quot;&lt;br&gt;&quot;;
                
                //echo &quot;MenuStatus:&quot; . $pageArray[&quot;menuStatus&quot;] . &quot;&lt;br&gt;&quot;;
                
                // Ignore last element in array
                // Last element lists all top level pages
                if($pageKey != &#039;&#039; ){
                    
                    // Do page settings allow display?
                    // menuStatus &#039;Y&#039; means page is to be shown in menu(s)
                    // (unlike, for example, the search results page)
                    if($pageArray[&quot;menuStatus&quot;] == &quot;Y&quot; ){
                        
                        // Is page not a subpage?
                        // &#039;parent&#039; key always exists, value can be empty
                        // If a page has a parent it will be called with the child pages of the parent
                        if ($pageArray[&quot;parent&quot;] == &quot;&quot;){
                            
    //                      echo &quot;Ready to process page[&#039;url&#039;]: &quot; . $pageArray[&#039;url&#039;] . &quot;&lt;br&gt;&quot;;
                            
                            //echo &quot;page has no parent&lt;br&gt;&quot;;
                            
                            //console_log(&#039;Text 253:&#039;, $pageArray);
                            
                            $pageProcessor = $this-&gt;process_page($pagesArray, $pageKey, $langCode, $levelCount, $numberLevels);
                            // Is array
                            
                        } else {    // Page is a sub-page, so will be displayed as such
                            
                          //echo &quot;page has parent&lt;br&gt;&quot;;
                            
                        }   // END if ($pageArray[&quot;parent&quot;])
                        
                   }    // END if($pageArray[&quot;menuStatus&quot;])
                    
               }// END if($pageKey != &#039;&#039;)
                
            }    // END foreach($pagesArray ...)
            
       // Generate menu from a specific (parent) page
       } else {
            
            //echo &quot;322: parentPage: &quot; . $parentPage . &quot;&lt;br&gt;&quot;;
            
            $pageArray = $pagesArray[$parentPage];
            
            if ($pageArray[&quot;menuStatus&quot;] == &quot;Y&quot;) {
                
                //echo &quot;menuStatus: Y&lt;br&gt;&quot;;
                
                $levelCount = $levelCount + 1;
                
                foreach($pageArray[&quot;children&quot;] as $pageKey =&gt; $pageName) {
                
                    //echo &quot;334: pageKey: &quot; . $pageKey . &quot;, pageName: &quot; . $pageName . &quot;&lt;br&gt;&quot;;
                    
                    $pageProcessor = $this-&gt;process_page($pagesArray, $pageName, $langCode, $levelCount, $numberLevels);
                }
                
            }
            
        }   // END if ($parentPage ...)
        
        echo &quot;&lt;/ul&gt;&quot;;
        
    }    // END fcn. parse_elements()
    
    
    public function debug(){
        
        foreach(debug_backtrace() as $t) {
            echo $t[&#039;file&#039;] . &#039; line &#039; . $t[&#039;line&#039;] . &#039; calls &#039; . $t[&#039;function&#039;] . &quot;()&lt;br/&gt;&quot;;
        }
        
    }
    
}    // END class feule_menu_mobil

// - - - - - - - - - - - - - - - - - - - - -
// START - Get the list of pages
// Is a flat array - can be listed using &#039;print_r($pagesArray)&#039; below
$pagesArray = return_i18n_pages();


//echo &quot;&lt;pre&gt;&quot;;
//print_r($pagesArray);
//echo &quot;&lt;/pre&gt;&quot;;


// CAUTION! DO NOT ACTIVATE FUNCTION N MOBILE AND ASIDE VERSIONS WITH THE SAME NAME
//
//function console_log( $text, $data ){
//  echo $text;
//  echo &#039;&lt;script&gt;&#039;;
//echo &#039;console.log(&#039;.$text.&#039;)&#039;;
//  echo &#039;console.log(&#039;. json_encode( $data ) .&#039;)&#039;;
//  echo &#039;&lt;/script&gt;&#039;;
//}


// Determine code for current language 
// (args is set by i18n call in navigation.inc.php)
global $args;
$language = $args[0];
//echo &quot;Language: &quot; . $language . &quot;&lt;br&gt;&quot;;
$parentPage = $args[1];
//echo &quot;parentPage: &quot; . $parentPage . &quot;&lt;br&gt;&quot;;
$numberLevels = $args[2];
$levelCount = 0;


// Determine if language code is default
// (Required as default language elements are specified 
//  in $i18n_pages arrays without a code
//  e.g. &#039;title&#039; instead of &#039;title_de&#039;.)
foreach($pagesArray[&#039;index&#039;] as $pageKey =&gt; $pageArray) {
    //echo &quot;Test: &quot; . $x . &quot;: &quot; . $x_value . &quot;&lt;br&gt;&quot;;
    if ( substr( $pageKey, 0, 6 )== &quot;title_&quot; ){
        //echo &quot;title_ found&lt;br&gt;&quot;;
        if ( substr( $pageKey, -2 ) ==  $language ) {
            $langCode = $language;
        } else {
            $langCode = &#039;default&#039;;
        }
    }
}
//echo &quot;langCode: &quot; . $langCode  . &quot;&lt;br&gt;&quot;;

$slider_menu = new slider_menu();

$slider_menu -&gt; parse_elements($pagesArray, $langCode, $parentPage, $levelCount, $numberLevels);

?&gt;
    &lt;/nav&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[SocialMedia]]></title><slug>socialmedia</slug><value><![CDATA[&lt;div id=&quot;socialmedia&quot; &gt;
	&lt;h2&gt;Connect&lt;/h2&gt;
	&lt;div class=&quot;icons&quot;&gt;
	&lt;?php
		if($innov_settings){
			foreach($innov_settings as $id=&gt;$setting){
				if ($setting  != &#039;&#039; ){
					echo &#039;&lt;a href=&quot;&#039;.$setting.&#039;&quot;&gt;&lt;img src=&quot;&#039;.get_theme_url(false).&#039;/assets/images/&#039;.$id.&#039;.png&quot; alt=&quot;&#039;.$id.&#039;&quot;/&gt;&lt;/a&gt;&#039;;
				}
			}
		}
	?&gt;				
		&lt;img src=&quot;&lt;?php get_theme_url(); ?&gt;/assets/images/break.png&quot; /&gt;
		
		&lt;!-- addthis popup - you can add your username if you want analytics: http://www.addthis.com/help/customizing-addthis --&gt;
		&lt;div class=&quot;addthis_toolbox&quot; style=&quot;display:inline;width:24px;&quot; &gt;
			&lt;a href=&quot;//www.addthis.com/bookmark.php?v=250&quot; class=&quot;addthis_button_compact&quot;&gt;&lt;img src=&quot;&lt;?php get_theme_url(); ?&gt;/assets/images/share.png&quot; /&gt;&lt;/a&gt;
		&lt;/div&gt;
		&lt;script type=&quot;text/javascript&quot; src=&quot;//s7.addthis.com/js/250/addthis_widget.js&quot;&gt;&lt;/script&gt;
	&lt;/div&gt;
&lt;/div&gt;]]></value></item><item><title><![CDATA[TagCloud_de]]></title><slug>tagcloud_de</slug><value><![CDATA[&lt;h2&gt;Tags&lt;/h2&gt;
&lt;?php get_i18n_tags(array(&#039;lang&#039;=&gt;&#039;de&#039;, &#039;showlang&#039;=&gt;&#039;1&#039;, &#039;slug&#039;=&gt;&#039;searchresults_de&#039;)); ?&gt;]]></value></item><item><title><![CDATA[TagCloud_en]]></title><slug>tagcloud_en</slug><value><![CDATA[&lt;h2&gt;Tags&lt;/h2&gt;
&lt;?php get_i18n_tags(array(&#039;lang&#039;=&gt;&#039;en&#039;, &#039;showlang&#039;=&gt;&#039;1&#039;, &#039;slug&#039;=&gt;&#039;searchresults&#039;)); ?&gt;]]></value></item><item><title><![CDATA[Tagline]]></title><slug>tagline</slug><value><![CDATA[Just Another GetSimple Website]]></value></item></channel>
